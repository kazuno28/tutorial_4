Railsコンソールでも、メソッドを定義することができる。

例えば引数を1つ取り、引数が空かどうかに基づいたメッセージを返すstring_messageというメソッドを定義してみる。
>> def string_message(str = '')
>>   if str.empty?
>>     "It's an empty string!"
>>   else
>>     "The string is nonempty."
>>   end
>> end
=> :string_message
>> puts string_message("foobar")
The string is nonempty.
>> puts string_message("")
It's an empty string!
>> puts string_message
It's an empty string!

最後の例を見ると分かるように、メソッドの引数をカッコですら省略することも可能。
def string_message(str = '') は、引数にデフォルト値を含めているから。
このように指定すると、str変数に引数を渡すことも渡さないこともできる。
引数を渡さない場合は、指定のデフォルト値が自動的に使われる。

※注意
　Rubyのメソッドには「暗黙の戻り値がある」
　これは、メソッド内で最後に評価された式の値が自動的に返されることを意味する。 (訳注: メソッドで戻り値を明示的に指定しなかった場合の動作）
　この場合、引数のstrが空かどうかに応じて、2つのメッセージ文字列のうちのいずれかを返す。
　Rubyでは戻り値を明示的に指定することもできる。
　
次のメソッドは上のメソッドと同じ結果を返す。　
>> def string_message(str = '')
>>   return "It's an empty string!" if str.empty?
>>   return "The string is nonempty."
>> end　
　
2番目のreturnは実はなくてもいい。
メソッド内の最後に置かれた式は、returnキーワードがなくても暗黙で値を返すため。
ここでは、両方にreturnを使う方が見た目の対称性が保たれるので好ましいと言える。


メソッドで引数の変数名にどんな名前を使っても、メソッドの呼び出し側には何の影響も生じない。
最初の例のstrを別の変数名 (the_function_argumentなど) に変更しても、メソッドの呼び出し方は全く同じ。
>> def string_message(the_function_argument = '')
>>   if the_function_argument.empty?
>>     "It's an empty string!"
>>   else
>>     "The string is nonempty."
>>   end
>> end
=> :string_message
>> puts string_message("")
It's an empty string!
>> puts string_message("foobar")
The string is nonempty.


[演習]
1. （コードを書き込む）の部分を適切なコードに置き換え、回文かどうかをチェックするメソッドを定義してみる。
 >> def palindrome_tester(s)
 >>   if （コードを書き込む）→　s == s.reverse
 >>     puts "It's a palindrome!"
 >>   else
 >>     puts "It's not a palindrome."
 >>   end
 >> end

2. 上で定義したメソッドを使って “racecar” と “onomatopoeia” が回文かどうかを確かめてみる。
   １つ目は回文である、２つ目は回文でない、という結果になれば成功。
  > puts palindrome_tester("racecar")
  It's a palindrome!
  
  > puts palindrome_tester("onomatopoeia")
  It's not a palindrome.

3. palindrome_tester("racecar")に対してnil?メソッドを呼び出し、戻り値がnilであるかどうかを確認してみる。
　 (つまりnil?を呼び出した結果がtrueであることを確認。)
　 このメソッドチェーンは、nil?メソッドが def palindrome_tester(s) ~… end の戻り値を受け取り、その結果を返しているという意味になる。
　> puts palindrome_tester("racecar").nil?
  It's a palindrome!
  true
  
  
Webサイトのレイアウトで使うコンパクトなヘルパーメソッドでは、メソッド定義、変数割り当て、論理評価、制御フロー、文字列の式展開7 など、Rubyの様々な要素が投入されている。
 [module ApplicationHelperという要素について]
モジュールは、関連したメソッドをまとめる方法の１つで、includeメソッドを使ってモジュールを読み込むことができる。(ミックスイン (mixed in) とも呼ぶ）
単なるRubyのコードを書くのであれば、モジュールを作成するたびに明示的に読み込んで使うのが普通だが、Railsでは自動的にヘルパーモジュールを読み込んでくれるので、include行をわざわざ書く必要がない。
つまり、本編で作成した、full_titleメソッドは自動的にすべてのビューで利用できるようになっている、ということ。
  