<ハッシュタグとシンボル>
ハッシュは本質的には配列と同じだが、インデックスとして整数値以外のものも使える点が配列と異なる。
　※この理由から、Perlなどのいくつかの言語ではハッシュを連想配列と呼ぶこともある。
ハッシュのインデックス (キー) は、通常何らかのオブジェクトである。
　Ex)>> user = {}                          # {}は空のハッシュ
　　 => {}
     >> user["first_name"] = "Michael"     # キーが "first_name" で値が "Michael"
     => "Michael"
     >> user["last_name"] = "Hartl"        # キーが "last_name" で値が "Hartl"
     => "Hartl"
     >> user["first_name"]                 # 要素へのアクセスは配列の場合と似ている
     => "Michael"
     >> user                               # ハッシュのリテラル表記
     => {"last_name"=>"Hartl", "first_name"=>"Michael"}

ハッシュは、キーと値のペアを波カッコで囲んで表記する。
キーと値のペアを持たない波カッコの組 ({}) は空のハッシュである。
重要なのは、ハッシュの波カッコは、ブロックの波カッコとはまったく別物であるという点！
ハッシュは配列と似ているが、1つの重要な違いとして、ハッシュでは要素の「並び順」が保証されないという点がある。
もし要素の順序が重要である場合は、配列を使う必要がある。

ハッシュの1要素を角カッコを使う代わりに、キーと値をハッシュロケットと呼ばれる=> によってリテラル表現するほうが簡単。
>> user = { "first_name" => "Michael", "last_name" => "Hartl" }
=> {"last_name"=>"Hartl", "first_name"=>"Michael"}


ここまではハッシュのキーとして文字列を使っていたが、Railsでは文字列よりもシンボルを使う方が普通。
シンボルは文字列と似ているが、クォートで囲む代わりにコロンが前に置かれている点が異なる。
 Ex)>> "name".split('')
　　=> ["n", "a", "m", "e"]
　　>> :name.split('')
　　NoMethodError: undefined method `split' for :name:Symbol
　　>> "foobar".reverse
　　=> "raboof"
　　>> :foobar.reverse
　　NoMethodError: undefined method `reverse' for :foobar:Symbol

　:nameはシンボル。シンボルを単なる文字列とみなしても構わない。
　
シンボルは、Ruby以外ではごく一部の言語にしか採用されていない特殊なデータ形式。
ただし文字列と違って、全ての文字が使えるわけではないことに注意！
>> :foo-bar
NameError: undefined local variable or method `bar' for main:Object
>> :2foo
SyntaxError


ハッシュのキーとしてシンボルを採用する場合、user のハッシュは次のように定義できる。
>> user = { :name => "Michael Hartl", :email => "michael@example.com" }
=> {:name=>"Michael Hartl", :email=>"michael@example.com"}
>> user[:name]              # :name に対応する値にアクセスする
=> "Michael Hartl"
>> user[:password]          # 未定義のキーに対応する値にアクセスする
=> nil

未定義のハッシュ値は単純にnilである。


ハッシュではシンボルをキーとして使うことが一般的なので、Ruby 1.9からこのような特殊な場合のための新しい記法がサポートされた。
>> h1 = { :name => "Michael Hartl", :email => "michael@example.com" }
=> {:name=>"Michael Hartl", :email=>"michael@example.com"}
>> h2 = { name: "Michael Hartl", email: "michael@example.com" }
=> {:name=>"Michael Hartl", :email=>"michael@example.com"}
>> h1 == h2
=> true

{ name: "Michael Hartl", email: "michael@example.com" }
この記法は、シンボルとハッシュロケットの組み合わせを、キーの名前の後にコロンを置き、その後に値が続くように置き換えたもの。

{ :name => "Michael Hartl" }　と　{ name: "Michael Hartl" }　は等価。


ハッシュの値にはほぼ何でも使うことができ、他のハッシュを使うことすらできる。
>> params = {}        # 'params' というハッシュを定義する ('parameters' の略)。
=> {}
>> params[:user] = { name: "Michael Hartl", email: "mhartl@example.com" }
=> {:name=>"Michael Hartl", :email=>"mhartl@example.com"}
>> params
=> {:user=>{:name=>"Michael Hartl", :email=>"mhartl@example.com"}}
>>  params[:user][:email]
=> "mhartl@example.com"


配列や範囲オブジェクトと同様、ハッシュもeachメソッドに応答する。
>> flash = { success: "It worked!", danger: "It failed." }
=> {:success=>"It worked!", :danger=>"It failed."}
>> flash.each do |key, value|
?>   puts "Key #{key.inspect} has value #{value.inspect}"
>> end
Key :success has value "It worked!"
Key :danger has value "It failed."

配列のeachメソッドでは、ブロックの変数は1つだけだがハッシュのeachメソッドでは、ブロックの変数はキーと値の2つになっていることに注意！
　→ハッシュに対してeachメソッドを実行すると、ハッシュの1つの「キーと値のペア」ごとに処理を繰り返す。


要求されたオブジェクトを表現する文字列を返すのに便利なinspectメソッド
>> puts (1..5).to_a            # 配列を文字列として出力
1
2
3
4
5
>> puts (1..5).to_a.inspect    # 配列のリテラルを出力
[1, 2, 3, 4, 5]
>> puts :name, :name.inspect
name
:name
>> puts "It worked!", "It worked!".inspect
It worked!
"It worked!"

オブジェクトを表示するためにinspectを使うことは非常によくあることなので、 pメソッドというショートカットがある。
>> p :name             # 'puts :name.inspect' と同じ
:name


[演習]
1. キーが'one'、'two'、'three'となっていて、それぞれの値が'uno'、'dos'、'tres'となっているハッシュを作ってみる。
　 その後、ハッシュの各要素をみて、それぞれのキーと値を"'#{key}'はスペイン語で'#{value}'"といった形で出力。
 > numbers = {one: "uno", two: "dos", three: "tres"}
 => {:one=>"uno", :two=>"dos", :three=>"tres"}
 
 > numbers.each do |key,value|
 >   puts "#{key}のスペイン語は#{value}
 > end
 oneのスペイン語はuno
twoのスペイン語はdos
threeのスペイン語はtres
 => {:one=>"uno", :two=>"dos", :three=>"tres"} 

2. person1、person2、person3という３つのハッシュを作成し、それぞれのハッシュに:firstと:lastキーを追加し、適当な値を入力。
　 その後、paramsというハッシュのハッシュを作ってみる。
　 　1). キーparams[:father]の値にperson1を代入
　 　> person1= {first: "YAMADA",last: "TARO"}
     => {:first=>"YAMADA", :last=>"TARO"}
     
　 　2). キーparams[:mother]の値にperson2を代入
　 　> person2= {first: "SUZUKI",last: "JIRO"}
     => {:first=>"SUZUKI", :last=>"JIRO"} 
     
　 　3). キーparams[:child]の値にperson3を代入
　 　> person3= {first: "TANAKA",last: "SABURO"}
     => {:first=>"TANAKA", :last=>"SABURO"} 
     
　 　4).ハッシュのハッシュを調べていき、正しい値になっているか確かめる。
　 　　Ex)params[:father][:first]がperson1[:first]と一致しているか確かめる。
　 　> params={}
     => {}
     
     > params[:father] = person1
     => {:first=>"YAMADA", :last=>"TARO"}
     
     > params[:mother] = person2
     => {:first=>"SUZUKI", :last=>"JIRO"}
     
     > params[:child] = person3
     => {:first=>"TANAKA", :last=>"SABURO"}
     
     > params[:father][:first]
     => "YAMADA"
     
     > person1[:first]
     => "YAMADA"
     
3. userというハッシュを定義する。
　 このハッシュは３つのキー:name、:email、:password_digestを持っていて、
　 それぞれの値に名前、メールアドレス、16文字からなるランダムな文字列が代入されている。
 > user = {name: "kazu",email:"kazu@email.com",password_digest:('a'..'z').to_a.shuffle[0..15].join}
 => {:name=>"kazu", :email=>"kazu@email.com", :password_digest=>"rtpfcuvkgndayjzs"} 
 
 