Rubyでは、あらゆるものがオブジェクトである。文字列やnilですらオブジェクト。
オブジェクトとは (いついかなる場合にも) メッセージに応答するもの。

例えばlengthというメッセージに応答できるが、これは文字列の文字数を返す。
>> "foobar".length        # 文字列に "length" というメッセージを送る
=> 6


オブジェクトに渡されるメッセージは、一般にはメソッドと呼ばれる。
メソッドの実体は、そのオブジェクト内で定義されたメソッド。
Rubyの文字列は、次のようにempty?メソッドにも応答することができる。
>> "foobar".empty?
=> false
>> "".empty?
=> true


empty?メソッドの末尾にある疑問符、Rubyでは、メソッドがtrueまたはfalseという論理値 (boolean) を返すことを、末尾の疑問符で示す慣習がある。
論理値は、特に処理の流れを変更するときに有用。
>> s = "foobar"
>> if s.empty?
>>   "The string is empty"
>> else
>>   "The string is nonempty"
>> end
=> "The string is nonempty"

条件文を2つ以上含めたい場合は、elsif (else + if) という文を使う。
>> if s.nil?
>>   "The variable is nil"
>> elsif s.empty?
>>   "The string is empty"
>> elsif s.include?("foo")
>>   "The string includes 'foo'"
>> end
=> "The string includes 'foo'"

なお、論理値はそれぞれ && (and) や || (or)、! (not) オペレーターで表すこともできる。
>> x = "foo"
=> "foo"
>> y = ""
=> ""
>> puts "Both strings are empty" if x.empty? && y.empty?
=> nil
>> puts "One of the strings is empty" if x.empty? || y.empty?
"One of the strings is empty"
=> nil
>> puts "x is not empty" if !x.empty?
"x is not empty"
=> nil


ほぼあらゆるオブジェクトを文字列に変換するto_sメソッドを使って、nilがメソッドに応答する例。
>> nil.to_s
=> ""

空文字列が出力された。次に、nilに対してメソッドをチェーン (chain) して渡せることを確認する。
>> nil.empty?
NoMethodError: undefined method `empty?' for nil:NilClass
>> nil.to_s.empty?      # メソッドチェーンの例
=> true

このように、nilオブジェクト自身はempty?メソッドには応答しないにもかかわらず、nil.to_sとすると応答することがわかる。


nilかどうかを調べるメソッドもある。
>> "foo".nil?
=> false
>> "".nil?
=> false
>> nil.nil?
=> true

このコードは、ifキーワードの別の使い方を示している。
puts "x is not empty" if !x.empty?


Rubyではこのように、後続するifでの条件式が真のときにだけ実行される式 (後続if) を書くことができ、コードが非常に簡潔になる。
なお、unlessキーワードも同様に使える。
>> string = "foobar"
>> puts "The string '#{string}' is nonempty." unless string.empty?
The string 'foobar' is nonempty.
=> nil


Rubyにおいてnilは特別なオブジェクトである。
Rubyのオブジェクトのうち、オブジェクトそのものの論理値がfalseになるのは、false自身とnilの2つしかない。
なお、「!!」(「バンバン (bang bang)」) という演算子を使うと、そのオブジェクトを2回否定することになるので、どんなオブジェクトも強制的に論理値に変換できる。
>> !!nil
=> false

その他のあらゆるRubyのオブジェクトは、ゼロですらtrueになる。
>> !!0
=> true


[演習]
1. "racecar" の文字列の長さはいくつですか? lengthメソッドを使って調べてみる。
 > "racecar".length
 => 7 

2. reverseメソッドを使って、"racecar"の文字列を逆から読むとどうなるか調べてみる。
 > "racecar".reverse
 => "racecar" 
 
3. 変数sに "racecar" を代入してください。その後、比較演算子 (==) を使って変数sとs.reverseの値が同じであるかどうか、調べてみる。
 > s = "racecar"
 >"racecar".reverse == s.reverse
 => true 
 
4. >> puts "It's a palindrome!" if s == s.reverseを実行すると、どんな結果になるか？
  > puts "It's a palindrome!" if s == s.reverse
  It's a palindrome!
  => nil 
  
   変数sに "onomatopoeia" という文字列を代入するとどうなるか？
   ※ヒント: 上矢印を使って以前に使ったコマンドを再利用すると一からコマンドを全部打ち込む必要がなくて便利。
  > s = "onomatopoeia"
  > puts "It's a palindrome!" if s == s.reverse
  => nil 
 