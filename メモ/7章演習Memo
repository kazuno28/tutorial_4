[ユーザーを表示する]
<デバックとRails環境>
[application.html.erb]
<%= debug(params) if Rails.env.development? %>

if Rails.env.development?　としておくことで、デバッグ情報はRailsの3つのデフォルト環境のうち、開発環境 (development) だけで表示されるようになる。
Rails.env.development?がtrueになるのは開発環境に限られるため、上記コードは本番アプリケーションやテストで挿入されることはない。


[custom.scss]
sassのミックスイン機能 (ここではbox_sizing) を使っている。
ミックスイン機能を使うことで、CSSルールのグループをパッケージ化して複数の要素に適用することができる。

[演習]
1. ブラウザから /about にアクセスし、デバッグ情報が表示されていることを確認。
　 このページを表示するとき、どのコントローラとアクションが使われていたかparamsの内容から確認。

 controller:static_pages
 action:about

2. Railsコンソールを開き、データベースから最初のユーザー情報を取得し、変数userに格納。
　 その後、puts user.attributes.to_yamlを実行すると何が表示されるか。表示された結果と、yメソッドを使ったy user.attributesの実行結果を比較する。

 > user = User.find_by(email: "mhartl@example.com")

 > puts user.attributes.to_yaml
 ---
 id: 1
 name: nick
 email: mhartl@example.com
 created_at: !ruby/object:ActiveSupport::TimeWithZone
   utc: &1 2022-03-01 07:06:09.363083000 Z
   zone: &2 !ruby/object:ActiveSupport::TimeZone
     name: Etc/UTC
   time: *1
 updated_at: !ruby/object:ActiveSupport::TimeWithZone
   utc: &3 2022-03-01 07:23:40.663663000 Z
   zone: *2
   time: *3
 password_digest: "$2a$10$j8bBWWjqzTUsyA8pS9fcTOGTQZ9r5StosmJifoMBEMF2mc973B4Sm"
  => nil

 > y user.attributes
 ---
 id: 1
 name: nick
 email: mhartl@example.com
 created_at: !ruby/object:ActiveSupport::TimeWithZone
   utc: &1 2022-03-01 07:06:09.363083000 Z
   zone: &2 !ruby/object:ActiveSupport::TimeZone
     name: Etc/UTC
   time: *1
 updated_at: !ruby/object:ActiveSupport::TimeWithZone
   utc: &3 2022-03-01 07:23:40.663663000 Z
   zone: *2
   time: *3
 password_digest: "$2a$10$j8bBWWjqzTUsyA8pS9fcTOGTQZ9r5StosmJifoMBEMF2mc973B4Sm"
  => nil

puts user.attributes.to_yaml と y user.attributes の実行結果は同じ。


<Usersリソース>
[演習]
1. 埋め込みRubyを使って、マジックカラム (created_atとupdated_at) の値をshowページに表示。
 [users/show.html.erb]
 <%= @user.created_at %>,<%= @user.updated_at %>

2. 埋め込みRubyを使って、Time.nowの結果をshowページに表示。ページを更新すると、その結果はどう変わっているか確認。
 [users/show.html.erb]
 <%= Time.now %>

 更新すると時間も進んだ


<debuggerメソッド>
[演習]
1. showアクションの中にdebuggerを差し込み、ブラウザから /users/1 にアクセスしコンソールに移り、
   putsメソッドを使ってparamsハッシュの中身をYAML形式で表示。
    ヒント:puts user.attributes.to_yamlを参考。
 (byebug) puts params.to_yaml
 --- !ruby/object:ActionController::Parameters
 parameters: !ruby/hash:ActiveSupport::HashWithIndifferentAccess
   controller: users
   action: show
   id: '1'
 permitted: false
 nil

2. newアクションの中にdebuggerを差し込み、/users/new にアクセスし、@userの内容はどのようになっているか確認。
 (byebug) puts @user

 nil


<Gravatar画像とサイドバー>
[演習]
2. gravatar_forヘルパーを変更して、sizeをオプション引数として受け取れるようにしてみる。
　 うまく変更できると、gravatar_for user, size: 50といった呼び出し方ができるようになる。
 [users_helper.rb]
  def gravatar_for(user,options = { size: 80 })
    gravatar_id = Digest::MD5::hexdigest(user.email.downcase)
    size = options[:size]
    gravatar_url = "http://secure.gravatar.com/avatar/#{gravatar_id}?s=#{size}"
    image_tag(gravatar_url,alt: user.name,class: "gravatar")
  end

3. 先ほど変更したリスト 7.12を、リスト 7.13のように置き換えてもうまく動くことを確認。
　 この２つの実装方法はどういった違いがあるか。
 [users_helper.rb]
  def gravatar_for(user, size: 80)
    gravatar_id = Digest::MD5::hexdigest(user.email.downcase)
    gravatar_url = "https://secure.gravatar.com/avatar/#{gravatar_id}?s=#{size}"
    image_tag(gravatar_url, alt: user.name, class: "gravatar")
  end

  ハッシュから変数になった。


[ユーザー登録フォーム]
<form_withを使用する>
[演習]
1. 試しに、:nameを:nomeに置き換えてみると、どんなエラーメッセージが表示されるようになるか。
 NoMethodError in Users#new が表示される。

2. 試しに、ブロックの変数fをすべてfoobarに置き換えてみて、結果が変わらないことを確認。
　 変数名をfoobarとするのはあまり良い変更ではなさそう。その理由について考えてみる。
 結果が変わらないことを確認。
 変数名をfoobarとするのは、視認性が悪いからと考える。


<フォームHTML>
フォームを理解するために、小さなコードに分けて考えてみる。

  <%= form_with model: @user,local:true do |f| %>
  ・
  ・
  <% end %>
doキーワードは、 form_withが1つの変数を持つブロックを取ることを表す。この変数fは “form” のf。
local: trueと引数を渡す事で、これが通常のHTTPリクエストになり、ページ全体が返ってきてページがリロードされ、エラーメッセージも表示されるようになる。

このfオブジェクトは、HTMLフォーム要素 (テキストフィールド、ラジオボタン、パスワードフィールドなど) に対応するメソッドが呼び出されると、
@userの属性を設定するために特別に設計されたHTMLを返す。
<%= f.label :name %>
<%= f.text_field :name %>
このコードを実行すると、Userモデルのname属性を設定する、ラベル付きテキストフィールド要素を作成するのに必要なHTMLを作成する。

[演習]
1. 『HTML編』ではHTMLをすべて手動で書き起こしているが、なぜformタグを使わなかったか考えてみる。
 入力・送信フォームを作成していないから。


[ユーザー登録失敗]
<Storong Parameters>
[演習]
1. /signup?admin=1 にアクセスし、paramsの中にadmin属性が含まれていることをデバッグ情報から確認。
 パラメータ情報にadminが含まれている。

<エラーメッセージ>
[演習]
1. 最小文字数を5に変更すると、エラーメッセージも自動的に更新されることを確かめる。
 5にすると、エラーメッセージも更新された。

2. 未送信のユーザー登録フォームのURLと、送信済みのユーザー登録フォームのURLを比べてみて、なぜURLは違っているのか考えてみる。
 最初は/signupだが、エラー時にはcreateアクションが/usersを呼び出す。
 renderはnewを通るが、renderがviewを呼び出すときはアクションを経由しないため、URLはcreateアクションの時に指定されてる/usersとなるから。


[ユーザー登録成功]
<登録フォームの完成>
[演習]
1. 有効な情報を送信し、ユーザーが実際に作成されたことを、Railsコンソールを使って確認。
 > User.second
  User Load (0.2ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ? OFFSET ?  [["LIMIT", 1], ["OFFSET", 1]]
 => #<User id: 2, name: "test", email: "test@example.com", created_at: "2022-03-07 07:59:03", updated_at: "2022-03-07 07:59:03",
 password_digest: "$2a$10$yJx9G6jBBzG0MRhuINiYaOlgSnE8iH/9NJdod/rShDc...">

2. [users_controller.rb]のredirect_to user_url(@user)とredirect_to @userが同じ結果になることを確認。
 同じ結果になった。

<flash>
[演習]
1. コンソールに移り、文字列内の式展開でシンボルを呼び出してみる。
　  Ex)"#{:success}"といったコードを実行すると、どんな値が返ってくるか確認。
 > "#{:success}"
 => "success"

2. 先ほどの演習で試した結果を参考に、flashはどのような結果になるか考えてみる。
 >  "#{flash}"
 => "{:success=>\"It worked!\", :danger=>\"It failed.\"}

 >  "#{flash[:success]}"
 => "It worked!"

 > "#{flash[:danger]}"
 => "It failed."


<実際のユーザー登録>
[演習]
1. Railsコンソールを使って、新しいユーザーが本当に作成されたのかもう一度チェック。
 > User.find_by(email: "example@railstutorial.org")
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?  [["email", "example@railstutorial.org"], ["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24",
 updated_at: "2022-03-07 08:23:24", password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...">

2. 自分のメールアドレスでユーザー登録を試してみる。既にGravatarに登録している場合、適切な画像が表示されているか確認。
 画像が表示されているのを確認。


<成功時のテスト>
[演習]
1. flashに対するテストを書いてみる。
 assert_not flash.empty?

3. [users_controller.rb]のリダイレクトの行をコメントアウトすると、テストが失敗することを確認。
 失敗した
