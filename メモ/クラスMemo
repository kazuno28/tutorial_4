<クラス>
[コンストラクタ]
ダブルクォートを使って文字列のインスタンスを作成したが、これは文字列のオブジェクトを暗黙で作成するリテラルコンストラクタ。

>> s = "foobar"       # ダブルクォートは実は文字列のコンストラクタ
=> "foobar"
>> s.class
=> String
上のコードでは、文字列がclassメソッドに応答しており、その文字列が所属するクラスを単に返していることがわかる。


暗黙のリテラルコンストラクタを使う代わりに、明示的に同等の名前付きコンストラクタを使うことができる。
名前付きコンストラクタは、クラス名に対してnewメソッドを呼び出す。
>> s = String.new("foobar")   # 文字列の名前付きコンストラクタ
=> "foobar"
>> s.class
=> String
>> s == "foobar"
=> true
この動作はリテラルコンストラクタと等価ですが、動作の内容が明確に示されている。

配列でも、文字列と同様にインスタンスを生成できる。
>> a = Array.new([1, 3, 2])
=> [1, 3, 2]

ハッシュの場合は若干異なる。
配列のコンストラクタであるArray.new は配列の初期値を引数に取るが、Hash.new はハッシュのデフォルト 値を引数に取る。
これは、キーが存在しない場合のデフォルト値である。
>> h = Hash.new
=> {}
>> h[:foo]            # 存在しないキー (:foo) の値にアクセスしてみる
=> nil
>> h = Hash.new(0)    # 存在しないキーのデフォルト値をnilから0にする
=> {}
>> h[:foo]
=> 0

メソッドがクラス自身 (ここの場合はnew) に対して呼び出されるとき、このメソッドをクラスメソッドと呼ぶ。
クラスのnewメソッドを呼び出した結果は、そのクラスのオブジェクトであり、これはクラスのインスタンスとも呼ばれる。
lengthのように、インスタンスに対して呼び出すメソッドはインスタンスメソッドと呼ばれる。


[演習]
1. 1から10の範囲オブジェクトを生成するリテラルコンストラクタは何か？
 > a = 1..10
 => 1..10

 > a.class
 => Range

2. Rangeクラスとnewメソッドを使って、1から10の範囲オブジェクトを作る。
　  ヒント: newメソッドに2つの引数を渡す必要がある。
 > b = Range.new(1,10)
 => 1..10

3. 比較演算子==を使って、上記２つの課題で作ったそれぞれのオブジェクトが同じであることを確認。
 > a == b
 => true


<クラス継承>
superclassメソッドを使ってクラス階層を調べてみる。

>> s = String.new("foobar")
=> "foobar"
>> s.class                        # 変数sのクラスを調べる
=> String
>> s.class.superclass             # Stringクラスの親クラスを調べる
=> Object
>> s.class.superclass.superclass  # Ruby 1.9からBasicObjectが導入
=> BasicObject
>> s.class.superclass.superclass.superclass
=> nil

これは、継承階層を示している。
ここでは、StringクラスのスーパークラスはObjectクラスで、ObjectクラスのスーパークラスはBasicObjectクラスだが、
BasicObjectクラスはスーパークラスを持たないことがわかる。

この図式は、すべての Ruby のオブジェクトにおいて成り立つ。
クラス階層をたどっていくと、 Rubyにおけるすべてのクラスは最終的にスーパークラスを持たないBasicObjectクラスを継承している。

これが、"Rubyではあらゆるものがオブジェクトである" ということの技術的な意味。

 [Stringクラスの継承階層]
　　　BasicObject
　　　　　↑
　　　　Object
　　　　　↑
　　　　String


Wordクラスを作成し、その中に、ある単語が回文になっていたらtrueを返すpalindrome?メソッドを作成してみる。

継承のためのRubyの Word < String 記法
>> class Word < String             # WordクラスはStringクラスを継承する
>>   # 文字列が回文であればtrueを返す
>>   def palindrome?
>>     self == self.reverse        # selfは文字列自身を表す
>>   end
>> end
=> :palindrome?
こうすることで、新しいpalindrome?メソッドだけではなく、Stringクラスが扱えるすべてのメソッドがWordクラスでも使えるようになる。

>> s = Word.new("level")    # 新しいWordを作成し、"level" で初期化する
=> "level"
>> s.palindrome?            # Wordが回文かどうかを調べるメソッド
=> true
>> s.length                 # WordはStringで扱える全てのメソッドを継承している
=> 5

WordクラスはStringクラスを継承しているので、コンソールを使ってクラス階層を明示的に確認できる。
>> s.class
=> Word
>> s.class.superclass
=> String
>> s.class.superclass.superclass
=> Object

 [組み込みではないWordクラスの継承階層]
 　　　　　　BasicObject
　　　　　　↑
　　　　　Object
　　　　　　↑
　　　　　String
　　　　　　↑
　　　　　 Word

単語の文字を逆順にしたものが元の単語と同じであるかどうかのチェックを、
Wordクラスの中から自分自身が持つ単語にアクセスすることで行なっていることに注目する！

Rubyでは、selfキーワードを使ってこれを指定することができる。
Wordクラスの中では、selfはオブジェクト自身を指す。
　→self == self.reverseを使って単語が回文であるかどうかを確認できる。
　　なお、Stringクラスの内部では、メソッドや属性を呼び出すときのself.も省略可能。
　　self == reverse

[演習]
1. Rangeクラス、Hashクラス、Symbolクラスの継承階層を調べてみる。
 [Rangeクラス]
 > a = 1..5
 => 1..5

 > a.class
 => Range

 > a.class.superclass
 => Object

 > a.class.superclass.superclass
 => BasicObject

 > a.class.superclass.superclass.superclass
 => nil


 [Hashクラス]
 > h = {}
 => {}

 > h.class
 => Hash

 > h.class.superclass
 => Object

 > h.class.superclass.superclass
 => BasicObject

 > h.class.superclass.superclass.superclass
 => nil


 [Symbolクラス]
 > s = :symbol
 => :symbol

 > s.class
 => Symbol

 > s.class.superclass
 => Object

 > s.class.superclass.superclass
 => BasicObject

 > s.class.superclass.superclass.superclass
 => nil


2. 上記コードのself.reverseのselfを省略し、reverseと書いてもうまく動くことを確認してみる。
 > class Word < String
 >   def palindrome?
 >     self == reverse
 >   end
 > end

 > s = Word.new("asdf")
 => "asdf"

 > s.palindrome?
 => false

 > s = Word.new("level")
 => "level"

 > s.palindrome?
 => true


<組み込みクラスの変更>
継承を使わずにpalindrome?メソッドをStringクラス自身に追加して(つまりStringクラスを拡張して)使用出来たら、
わざわざWordクラスを作らなくてもpalindrome?をリテラル文字列に対して直接実行できるようになるのか…？

>> "level".palindrome?
NoMethodError: undefined method `palindrome?'  for "level":String
現状だとこのエラーになる。


Rubyでは組み込みの基本クラスの拡張が可能。

>> class String
>>   # 文字列が回文であればtrueを返す
>>   def palindrome?
>>     self == self.reverse
>>   end
>> end
=> :palindrome?
>> "deified".palindrome?
=> true

【組み込みクラスの変更はきわめて強力なテクニックだが、大きな責任を伴うので、
　真に正当な理由がない限り、組み込みクラスにメソッドを追加することは無作法であると考えられている!!!】

Railsの場合、組み込みクラスの変更を正当化できる理由
Ex) Web アプリケーションでは、変数が絶対に空白にならないようにしたくなることがよくあるので、Railsはblank?メソッドをRuby に追加している。
　　Railsの拡張は自動的にRailsコンソールにも取り込まれるので、コンソールで拡張の結果を確認できる。

　　>> "".blank?
　　=> true
　　>> "      ".empty?
　　=> false
　　>> "      ".blank?
　　=> true
　　>> nil.blank?
　　=> true

　　スペースが集まってできた文字列は空 (empty) とは認識されないが、空白 (blank) であると認識されていることがわかる。

　　nilは空白と認識されることに注意する!!!
　　nilは文字列ではないので、Railsがblank?メソッドをStringクラスではなく、Object自身に追加していることがわかる。

[演習]
1. palindrome?メソッドを使って、“racecar”が回文であり、“onomatopoeia”が回文でないことを確認してみる。
　 南インドの言葉「Malayalam」は回文であるか？
　 ヒント: downcaseメソッドで小文字にすることを忘れない。

　 > "racecar".palindrome?
   => true

   > "onomatopoeia".palindrome?
   => false

   > "Malayalam".downcase.palindrome?
   => true

2. 下記コードを参考にStringクラスにshuffleメソッドを追加してみる。
 　>> class String　　　　　　　　　　　　> class String
　 >>   def shuffle　　　　　　　　　　　 >   def shuffle
   >>     self.?('').?.?                  >     self.split('').shuffle.join
   >>   end                          →　  >   end
   >> end                                 > end
   >> "foobar".shuffle                    > "foobar".shuffle
   => "borafo"                            => "arbfoo"

3. 上記コードのself.を削除してもうまく動くことを確認する。
 > class String
 >   def shuffle
 >     split('').shuffle.join
 >   end
 > end
 > "foobar".shuffle
 => "ofbroa"
 

<コントローラクラス>
今回はStaticPagesControllerはApplicationControllerを継承して定義されるhomeやhelp、aboutアクションを見ていく。

RailsコンソールはセッションごとにローカルのRails環境を読み込むので、
コンソール内で明示的にコントローラを作成したり、そのクラス階層を調べたりすることができる。

> controller = StaticPagesController.new
 => #<StaticPagesController:0x0000000004a45160 @_action_has_layout=true, @_routes=nil, @_request=nil, @_response=nil> 

> controller.class
 => StaticPagesController

> controller.class.superclass
 => ApplicationController

> controller.class.superclass.superclass
 => ActionController::Base 

> controller.class.superclass.superclass.superclass
 => ActionController::Metal 

> controller.class.superclass.superclass.superclass.superclass
 => AbstractController::Base

> controller.class.superclass.superclass.superclass.superclass.superclass
 => Object

　【StaticPagesコントローラの継承階層】
　　　　　　　BasicObject
　　　　　　　　　 ↑
　　　　　　　　Object
　　　　　　　　　 ↑
　　　　AbstractController::Base
　　　　　         ↑
　　　　ActionController::Metal
　　　　           ↑
　　　　 ActionController::Base 
　　　　 　　　　　↑
　　　　 ApplicationController
　　　　 　　　　　↑
　　　　 StaticPagesController
　　　　 
Railsコンソールでは、その中からコントローラのアクション (実はメソッド) を呼ぶこともできる。
> controller.home
 => nil 
homeアクションの中身は空なのでnilが返される。

※Railsのアクションには戻り値がない!!!
　home アクションはWebページを表示するためのものであり、値を返すためのものではない。
　しかも、第3章では一度もStaticPagesController.newを実行していない。
　　　
　　　→なぜこれでうまくいっているのか？
　　　Railsは確かにRubyで書かれているが、既にRubyとは別物である。
　　　Railsのクラスは、普通のRubyオブジェクトと同様に振る舞うものもあるが、
　　　多くのクラスにはRailsの魔法の粉が振りかけられている。（？）
　　　Railsは独特であり、Rubyとは切り離して学習する必要がある。


[演習]
1. 第2章で作ったToyアプリケーションのディレクトリでRailsコンソールを開き、
   User.newと実行することでuserオブジェクトが生成できることを確認。
 > User.new
 => #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>

2. 生成したuserオブジェクトのクラスの継承階層を調べてみる。
　> user = User.new
　=> #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>
　
　> user.class
　=> User(id: integer, name: string, email: string, created_at: datetime, updated_at: datetime)
　
　> user.class.superclass
　=> ApplicationRecord(abstract)
　
　> user.class.superclass.superclass
　=> ActiveRecord::Base
　
　> user.class.superclass.superclass.superclass
　=> Object
　
　> user.class.superclass.superclass.superclass.superclass
　=> BasicObject
　
　> user.class.superclass.superclass.superclass.superclass.superclass
　=> nil
 
 
 <ユーザークラス>
 [example_user.rb]
 class User
  attr_accessor :name, :email

  def initialize(attributes = {})
    @name  = attributes[:name]
    @email = attributes[:email]
  end

  def formatted_email
    "#{@name} <#{@email}>"
  end
end


>attr_accessor :name, :email

 ユーザー名とメールアドレス (属性: attribute) に対応するアクセサー (accessor) をそれぞれ作成する。
 アクセサーを作成すると、そのデータを取り出すメソッド (getter) と、データに代入するメソッド (setter) をそれぞれ定義してくれる。
 具体的には、この行を実行したことにより、インスタンス変数@nameとインスタンス変数@emailにアクセスするためのメソッドが用意される。
 
 
>def initialize(attributes = {})
    @name  = attributes[:name]
    @email = attributes[:email]
  end
  
  initializeは、User.newを実行すると自動的に呼び出されるメソッドである。
  この場合のinitializeメソッドは、attributesという引数を1つ取る。
  attributes変数は空のハッシュをデフォルトの値として持つため、名前やメールアドレスのないユーザーを作ることができる。


>def formatted_email
    "#{@name} <#{@email}>"
  end
  
  formatted_emailメソッドは、文字列の式展開を利用して、@nameと@emailに割り当てられた値をユーザーのメールアドレスとして構成する。
  @nameと@emailは両方ともインスタンス変数なので、自動的にformatted_emailメソッドで使えるようになる。


コンソールで確認...
>> require './example_user'     # example_userのコードを読み込む方法
=> true
>> example = User.new
=> #<User:0x224ceec @email=nil, @name=nil>
>> example.name                 # attributes[:name]は存在しないのでnil
=> nil
>> example.name = "Example User"           # 名前を代入する
=> "Example User"
>> example.email = "user@example.com"      # メールアドレスを代入する
=> "user@example.com"
>> example.formatted_email
=> "Example User <user@example.com>"


requireのパスにある’.’は、Unixの “カレントディレクトリ” (現在のディレクトリ) を表し、
’./example_user’というパスは、カレントディレクトリからの相対パスでexample_userファイルを探すようにRubyに指示する。

>example.name = "Example User"
空のexample_userを作成し、対応する属性にそれぞれ手動で値を代入することで、名前とメールアドレスを与える。

@name変数に"Example User"という値を設定、同様にemail属性にも値を設定する。
これらの値はformatted_emailメソッドで使われる。

initializeメソッドにハッシュを渡すことで、属性が定義済みの他のユーザを作成することができる。


>> user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
=> #<User:0x225167c @email="mhartl@example.com",
@name="Michael Hartl">
>> user.formatted_email
=> "Michael Hartl <mhartl@example.com>"

これは一般にマスアサインメント (mass assignment) と呼ばれる技法で、Railsアプリケーションでよく使われる。
　Ex)実際にハッシュ引数を使ってオブジェクトを初期化するコードがある。


[演習]
1. Userクラスで定義されているname属性を修正して、first_name属性とlast_name属性に分割してみる。
　 また、それらの属性を使って "Michael Hartl" といった文字列を返すfull_nameメソッドを定義してみる。
　 最後に、formatted_emailメソッドの@nameの部分を、full_nameに置き換えてみる。 (元々の結果と同じになっていれば成功)
　 
　 class User
     attr_accessor :first_name,:last_name, :email

     def initialize(attributes = {})
       @first_name = attributes[:first_name]
       @last_name = attributes[:first_name]
       @email = attributes[:email]
     end

     def full_name
       "#{@first_name} #{@last_name}"
     end

     def formatted_email
        "#{self.full_name} <#{@email}>"
     end
   end
   
   
   > require './example_user'
   => true
   
   > user = User.new
   => #<User:0x000000000363cab0 @first_name=nil, @last_name=nil, @email=nil>
   
   > user.first_name = "Michael"
   => "Michael"
   
   > user.last_name = "Hartl"
   => "Hartl" 
   
   > user.email = "mhartl@example.com"
   => "mhartl@example.com" 

2. "Hartl, Michael" といったフォーマット(苗字と名前がカンマ+半角スペースで区切られている文字列)で返すalphabetical_nameメソッドを定義してみる。
 example_user.rbに、
   def alphabetical_name
     "#{@last_name}, #{@first_name}"
   end
 を追加。
 
 > user.alphabetical_name
 => "Hartl, Michael"

3. full_name.splitとalphabetical_name.split(', ').reverseの結果を比較し、同じ結果になるかどうか確認する。
 > user.full_name.split
 => ["Michael", "Hartl"]
 
 > user.alphabetical_name.split(', ').reverse
 => ["Michael", "Hartl"] 
 