[ユーザーを更新する]
<編集フォーム>
[演習]
1. target="_blank"で新しいページを開くときには、セキュリティ上の小さな問題がある。
　 それは、リンク先のサイトがHTMLドキュメントのwindowオブジェクトを扱えてしまう、という点である。
　 具体的には、フィッシング (Phising) サイトのような、悪意のあるコンテンツを導入させられてしまう可能性がある。
　 セキュリティ上のリスクも排除しておく。
　 対処方法は、リンク用のaタグのrel (relationship) 属性に、"noopener"と設定するだけ。
　 Gravatarの編集ページへのリンクにこの設定をする。
 [users/edit.html.erb]
 <a href="http://gravatar.com/emails" target="_blank" rel="noopener">changes</a>

2. [リスト 10.5]のパーシャルを使って、new.html.erbビュー(リスト 10.6)とedit.html.erbビュー(リスト 10.7)をリファクタリングしてみる(コードの重複を取り除く)。
 　ヒント: 3.4.3で使ったprovideメソッドを使うと、重複を取り除ける。
 リスト通りやる。


<編集の失敗>
[演習]
1. 編集フォームから有効でないユーザー名やメールアドレス、パスワードを使って送信した場合、編集に失敗することを確認。
 失敗した。


<編集失敗時のテスト>
[演習]
1. [users_edit_test.rb]のテストに１行追加し、正しい数のエラーメッセージが表示されているかテストしてみる。
　 ヒント: 表 5.2で紹介したassert_selectを使ってalertクラスのdivタグを探しだし、「The form contains 4 errors.」というテキストを精査


<TDDで編集を成功させる>
[演習]
1. 実際に編集が成功するかどうか、有効な情報を送信して確かめる。
 成功した。

2. もしGravatarと紐付いていない適当なメールアドレス (foobar@example.comなど) に変更した場合、
　 プロフィール画像はどのように表示されるか、実際に編集フォームからメールアドレスを変更して、確認。
 プロフィール画像が切り替わった。

[認可]
<ユーザーにログインを要求する>
[演習]
1. デフォルトのbeforeフィルターは、すべてのアクションに対して制限を加える。
　 今回のケースだと、ログインページやユーザー登録ページにも制限の範囲が及んでしまうはず。(結果としてテストも失敗するはず)
　 リスト 10.15のonly:オプションをコメントアウトしてみて、テストスイートがそのエラーを検知できるかどうか (テストが失敗するかどうか) 確かめる。
 4つのエラーが出る。


<正しいユーザーを要求する>
[演習]
1. 何故editアクションとupdateアクションを両方とも保護する必要があるのか考えてみる。
 どちらもユーザー単位で行われるアクションだから。

2. 上記のアクションのうち、どちらがブラウザで簡単にテストできるアクションか？
 editの方がGETメソッドなのでブラウザから簡単にテストすることができる。


<フレンドリーフォワーディング>
[演習]
1. フレンドリーフォワーディングで、渡されたURLに初回のみ転送されていることを、テストを書いて確認。
　 次回以降のログインのときには、転送先のURLはデフォルト (プロフィール画面) に戻っている必要がある。
　 　ヒント: リスト 10.29のsession[:forwarding_url]が正しい値かどうか確認するテストを追加してみる。
 [users_edit_test.rb]に、
  assert_equal session[:forwarding_url], "http://www.example.com" +
  edit_user_path(@user)
 を追加。

2. 7.1.3で紹介したdebuggerメソッドをSessionsコントローラのnewアクションに置いてみる。
　 その後、ログアウトして /users/1/edit にアクセスしてみる。(デバッガーが途中で処理を止めるはず)
　 ここでコンソールに移り、session[:forwarding_url]の値が正しいかどうか確認。
　 また、newアクションにアクセスしたときのrequest.get?の値も確認。


[すべてのユーザーを表示する]
<ユーザーの一覧ページ>
[演習]
1. レイアウトにあるすべてのリンクに対して統合テストを書いてみる。
　 ログイン済みユーザーとそうでないユーザーのそれぞれに対して、正しい振る舞いを考える。
　 　ヒント: log_in_asヘルパーを使ってリスト 5.32にテストを追加してみる。
 [site_layout_test.rb]
 .
 .
  def setup
    @user = users(:michael)
  end

  test "layout links when logged in user" do
    log_in_as(@user)
    get root_path
    assert_select "a[href=?]", root_path, count: 2
    assert_select "a[href=?]", help_path
    assert_select "a[href=?]", about_path
    assert_select "a[href=?]", contact_path
    assert_select "a[href=?]", signup_path
    assert_select "a[href=?]", users_path
    assert_select "a[href=?]", user_path(@user)
    assert_select "a[href=?]", edit_user_path(@user)
    assert_select "a[href=?]", logout_path
  end
 end


<サンプルのユーザー>
[演習]
1. 試しに他人の編集ページにアクセスしてみて、10.2.2で実装したようにリダイレクトされるかどうかを確かめる。
 試しに、/users/1/edit と入力すると、root_urlに飛ばされた。


<ページネーション>
[演習]
1. Railsコンソールを開き、pageオプションにnilをセットして実行すると、１ページ目のユーザーが取得できることを確認。
 > User.paginate(page: nil)
  User Load (0.2ms)  SELECT  "users".* FROM "users" LIMIT ? OFFSET ?  [["LIMIT", 11], ["OFFSET", 0]]
   (0.1ms)  SELECT COUNT(*) FROM "users"
 => #<ActiveRecord::Relation [#<User id: 1, name: "Example User", email: "example@railstutorial.org", created_at: "2022-04-13 02:08:37",
 updated_at: "2022-04-13 02:08:37", password_digest: "$2a$10$3kLWGS5yW.W.owwAXwHiQuO8hICSBA06uqGWQHW9D12...", remember_digest: nil>, #<User id: 2, ...

2. 先ほどの演習課題で取得したpaginationオブジェクトは、何クラスか？
　 また、User.allのクラスとどこが違うか、比較してみる。
 > page = User.paginate(page: nil)
  .
  .
 > page.class
 => User::ActiveRecord_Relation

 > all = User.all
  .
  .
 > all.class
 => User::ActiveRecord_Relation


<ユーザー一覧のテスト>
[演習]
1. 試しにリスト10.45にあるページネーションのリンク(will_paginateの部分)を２つともコメントアウトしてみて、
   リスト 10.48のテストが redに変わるかどうか確かめる。
 コメントアウトしてテストするとredになった。

2. 先ほどは２つともコメントアウトしたが、１つだけコメントアウトした場合、テストが greenのままであることを確認。
   will_paginateのリンクが２つとも存在していることをテストしたい場合は、どのようなテストを追加すれば良いか?
   　ヒント: 表 5.2を参考にして、数をカウントするテストを追加してみる。


<パーシャルのリファクタリング>
[演習]
1. リスト 10.52にあるrenderの行をコメントアウトし、テストの結果が redに変わることを確認。
 [リスト 10.52]
 <% provide(:title, 'All users') %>
 <h1>All users</h1>

 <%= will_paginate %>

 <ul class="users">
  <%= render @users %>
 </ul>

 <%= will_paginate %>
 テストすると、REDになった。


[ユーザーを削除する]
<管理ユーザー>
[演習]
1. Web経由でadmin属性を変更できないことを確認。具体的には、リスト 10.56に示したように、
　 PATCHを直接ユーザーのURL (/users/:id) に送信するテストを作成してみる。
 　テストが正しい振る舞いをしているかどうか確信を得るために、まずはadminをuser_paramsメソッド内の
 　許可されたパラメータ一覧に追加するところから始めてみる。
 　最初のテストの結果は redになるはず。
 [users_controller_test.rb]
 test "shuld not allow the admin attribute to be edited via the web" do
   log_in_as(@other_user)
   assret_not @other_user.admin?
   patch user_path(@other_user) , params: {
                                    user: { password: @other_user.password,
                                            password_confirmation: @other_user.password,
                                            admin: true }}
   assert_not @other_user.reload.admin?
 end
 

<destroyアクション>
[演習]
1. 管理者ユーザーとしてログインし、試しにサンプルユーザを２〜３人削除してみる。
　 ユーザーを削除すると、Railsサーバーのログにはどのような情報が表示されるか？
 destroyが実行されデータベースから情報をdeleteした。