[セッション]
HTTPはステートレス (Stateless) なプロトコル。
　　→「状態 (state)」が「ない (less)」ので、HTTPのリクエスト１つ１つは、
　　　それより前のリクエストの情報をまったく利用できない、独立したトランザクションとして扱われる。

HTTPは言ってみれば、リクエストが終わると次回は何もかも最初からやり直す忘れっぽいプロトコル。
　　→ブラウザのあるページから別のページに移動したときに、ユーザーのIDを保持しておく手段がHTTPプロトコル内「には」全くない。

ユーザーログインの必要なWebアプリケーションでは、セッション (Session) と呼ばれる半永続的な接続を、
ユーザーのパソコンのWebブラウザとRailsサーバーなどに別途設定する。
　　→セッションはHTTPプロトコルと階層が異なるので、HTTPの特性とは別に接続を確保できる。

<Sessionsコントローラー>
[演習]
1. GET login_pathとPOST login_pathとの違いを説明できるか考えてみる。
 GET login_path は、取得ときで、POST login_path は、登録する時に使う。

2. ターミナルのパイプ機能を使ってrails routesの実行結果とgrepコマンドを繋ぐことで、Usersリソースに関するルーティングだけを表示させることができるが、
　 同様にして、Sessionsリソースに関する結果だけを表示させてみる。
　 　ヒント: パイプやgrepの使い方が分からない場合は 『コマンドライン編』の 「grepで検索する」を参考
 $ rails routes | grep sessions
  sessions_new GET    /sessions/new(.:format)                                                                  sessions#new
         login GET    /login(.:format)                                                                         sessions#new
               POST   /login(.:format)                                                                         sessions#create
        logout DELETE /logout(.:format)                                                                        sessions#destroy


<ログインフォーム>
[演習]
1. [sessions/new.html.erb]で定義したフォームで送信すると、Sessionsコントローラのcreateアクションに到達する。
　 Railsはこれをどうやって実現しているか、考えてみる。
 form_forヘルパーはpostメソッドを生成する。
 ログインフォームのHTMLでは、sessionコントローラとlogin_pathを引数に指定している。
 　→essionコントローラのcreateアクションが[sessions/new.html.erb]のform_forで指定されている。


<ユーザーの検索と認証>
[user && user.authenticate(…)の結果の組み合わせ]
　User	　　　　　　　Password	　　　　　　a && b
存在しない	　　　　何でもよい	　　　　　(nil && [オブジェクト]) == false
有効なユーザー	　　誤ったパスワード	　　(true && false) == false
有効なユーザー	　　正しいパスワード	　　(true && true) == true

[演習]
1. Railsコンソールを使って、[user && user.authenticate(…)の結果の組み合わせ]のそれぞれの式が合っているか確かめる。
　 まずはuser = nilの場合を、次にuser = User.firstとした場合を確かめてみる。
　 　ヒント: 必ず論理値オブジェクトとなるように、!!のテクニックを使う。例: !!(user && user.authenticate('foobar'))
 > user = nil
 => nil

 > !!(user && user.authenticate('foobar'))
 => false

 > user = User.first
  User Load (0.2ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24",
      updated_at: "2022-03-07 08:23:24", password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...">

 > !!(user && user.authenticate('aaaaaa'))
 => true

 > !!(user && user.authenticate('hogehoge'))
 => false


<フラッシュのテスト>
 テストの流れ
1. ログイン用のパスを開く
2. 新しいセッションのフォームが正しく表示されたことを確認する
3. わざと無効なparamsハッシュを使ってセッション用パスにPOSTする
4. 新しいセッションのフォームが再度表示され、フラッシュメッセージが追加されることを確認する
5. 別のページ (Homeページなど) にいったん移動する
6. 移動先のページでフラッシュメッセージが表示されていないことを確認する

[演習]
1. [sessions_controller.rb]の処理の流れが正しく動いているかどうか、ブラウザで確認。
　 特に、flashがうまく機能しているかどうか、フラッシュメッセージの表示後に違うページに移動することを忘れない。
 「Home」をクリックしてからflashメッセージが表示されなくなった。


[ログイン]
<log_inメソッド>
[sessions_helper.rb]に、session[:user_id] = user.id を実行すると、ユーザーのブラウザ内の一時cookiesに暗号化済みのユーザーIDが自動で作成される。
この後のページで、session[:user_id]を使ってユーザーIDを元通りに取り出すことができる。
一方、cookiesメソッドとは対照的に、sessionメソッドで作成された一時cookiesは、ブラウザを閉じた瞬間に有効期限が終了する。

sessionメソッドで作成した一時cookiesは自動的に暗号化され、[sessions_helper.rb]のコードは保護される。
　※攻撃者がこの情報をcookiesから盗み出すことができたとしても、それを使って本物のユーザーとしてログインすることはできない!!!
　　→ただし、sessionメソッドで作成した「一時セッション」にしか該当しない。cookiesメソッドで作成した「永続的セッション」ではそこまで断言はできない。
永続的なcookiesには、セッションハイジャックという攻撃を受ける可能性が常につきまとう。

[演習]
1. 有効なユーザーで実際にログインし、ブラウザからcookiesの情報を調べてみる。このとき、sessionの値はどうなっているか？


2. Expires（有効期限）の値について調べる。
 ブラウザセッションの終了時。


<現在のユーザー>
ユーザーIDを一時セッションの中に安全に置けるようになったので、今度はそのユーザーIDを別のページで取り出す。
　→current_userメソッドを定義して、セッションIDに対応するユーザー名をデータベースから取り出せるようにする。
current_userメソッドのEx) <%= current_user.name %> , redirect_to current_user

if @current_user.nil?
  @current_user = User.find_by(id: session[:user_id])
else　　　　　　　　　　　　　　　　　　　　　　　　　 #or演算子「||」を使うと→ @current_user = @current_user || User.find_by(id: session[:user_id])
  @current_user
end

[演習]
1. Railsコンソールを使って、User.find_by(id: ...)で対応するユーザーが検索に引っかからなかったとき、nilを返すことを確認。
 > session ={}
 => {}

 > session[:user_id] = nil
 => nil

 > @current_user ||= User.find_by(id: session[:user_id])
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."id" IS NULL LIMIT ?  [["LIMIT", 1]]
 => nil

 > session[:user_id] = User.first.id
  User Load (0.1ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => 1

2. :user_idキーを持つsessionハッシュを作成。||=演算子がうまく動くことも確認。
 > @current_user ||= User.find_by(id: session[:user_id])
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24",
      updated_at: "2022-03-07 08:23:24", password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...">

 > @current_user ||= User.find_by(id: session[:user_id])
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24",
      updated_at: "2022-03-07 08:23:24", password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...">


<レイアウトを変更>
[演習]
1. ブラウザのcookieインスペクタ機能を使って、セッション用のcookieを削除する。ヘッダー部分にあるリンクは非ログイン状態のものになっているか確認。
 非ログイン状態のものになった。

2. もう一度ログインしてみて、ヘッダーのレイアウトが変わったことを確認。その後、ブラウザを再起動させ、再び非ログイン状態に戻ったことも確認。
 確認


<レイアウトの変更をテストする>
[テスト手順]
1. ログイン用のパスを開く
2. セッション用パスに有効な情報をpostする
3. ログイン用リンクが表示されなくなったことを確認する
4. ログアウト用リンクが表示されていることを確認する
5. プロフィール用リンクが表示されていることを確認する

テストを確認するには、データベースにそのためのユーザーが登録されていなければいけない...
　→fixture (フィクスチャ) でテスト用データを作成する。

[演習]
1. 試しにSessionヘルパーのlogged_in?メソッドから!を削除してみて、[users_login_test.rb]が redになることを確認。
 確認。

2. 先ほど削除した部分 (!) を元に戻して、テストが greenに戻ることを確認。
 確認。


<ユーザー登録時にログイン>
[演習]
1. [users_controller.rb]のlog_inの行をコメントアウトすると、テストスイートは red になるか、green になるか確認。
 red になる。

2. 現在使っているテキストエディタの機能を使って、[users_controller.rb]をまとめてコメントアウトできないか調べる。
 　また、コメントアウトの前後でテストスイートを実行し、コメントアウトすると red に、コメントアウトを元に戻すと green になることを確認。
 　　ヒント: コメントアウト後にファイルを保存することを忘れない。
 まとめてコメントアウトする方法...「CTRL+A」→「CTRL+/」
 コメントアウトすると red に、コメントアウトを元に戻すと green になることを確認。