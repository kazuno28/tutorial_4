[AccountActivationsリソース]

<AccountActivationsコントローラ>
[演習]
1. 現時点でテストスイートを実行すると greenになることを確認。
 GREENになった。

2. 表 11.2の名前付きルートでは、_pathではなく_urlを使うように記してある。なぜか？
　 　ヒント: 私達はこれからメールで名前付きルートを使う。
 メールからアクセスしてもらうのには完全なURLが必要なため。


<AccountActivationのデータモデル>
[演習]
1. 本項での変更を加えた後、テストスイートが green のままになっていることを確認。
 GREENのままだった。

2. コンソールからUserクラスのインスタンスを生成し、そのオブジェクトからcreate_activation_digestメソッドを呼び出そうとすると
   (Privateメソッドなので)NoMethodErrorが発生することを確認。
   また、そのUserオブジェクトからダイジェストの値も確認。
 Userクラスのインスタンス生成
 > user = User.first

 create_activation_digestメソッド呼び出し
 > user.create_activation_digest
 Traceback (most recent call last):
         1: from (irb):2
 NoMethodError (private method `create_activation_digest' called for #<User:0x000000000189f228>)
 Did you mean?  restore_activation_digest!

 ダイジェストの値を確認
 > user.activation_digest
 => "$2a$10$2e16YvBHYqI01S2dCpAgRuq3HXch7zdrnPO57q7rWYaPQgEubbRp6"

3. リスト 6.34で、メールアドレスの小文字化にはemail.downcase!という(代入せずに済む)メソッドがあることを知った。
　 このメソッドを使って、リスト 11.3のdowncase_emailメソッドを改良してみる。
　 また、うまく変更できれば、テストスイートは成功したままになっていることも確認。
 [user.rb]
 def downcase_email
   email.downcase!
 end
 に変更。
 テストもGREEN。


[アカウント有効化のメール送信]
<送信メールのテンプレート>
[演習]
1. コンソールを開き、CGIモジュールのescapeメソッド (リスト 11.15) でメールアドレスの文字列をエスケープできることを確認。
   このメソッドで"Don't panic!"をエスケープすると、どんな結果になるか？
 > CGI.escape("Don't panic!")
 => "Don%27t+panic%21"
 

<送信メールのプレビュー>
[演習]
1. Railsのプレビュー機能を使って、ブラウザから先ほどのメールを表示してみる。「Date」の欄にはどんな内容が表示されているか？
 UTC時間が表示されている。
 

<送信メールのテスト>
[演習]
1. この時点で、テストスイートが greenになっていることを確認。
 GREENになっていた。

2. リスト 11.20で使ったCGI.escapeの部分を削除すると、テストが redに変わることを確認。
 REDになった。
 

<ユーザーのcreateアクションを更新>
[演習]
1. 新しいユーザーを登録したとき、リダイレクト先が適切なURLに変わったことを確認。その後、Railsサーバーのログから送信メールの内容を確認。
　 有効化トークンの値はどうなっているか？
 リダイレクト先がroot_urlになっている。
 
 有効トークン
 authenticity_token"=>"WpCCMEmmvPHoCG0NvzsRfp6yZqjs3+eq6GyJH9TqjNd87UAmAFeOH0aCytf/FCeMVf3b3fumkmFvpf2Ck0UDRg=="

2. コンソールを開き、データベース上にユーザーが作成されたことを確認。
　 また、このユーザーはデータベース上にはいますが、有効化のステータスがfalseのままになっていることを確認。
 > user = User.find_by(name: "aaaaa")
  User Load (0.3ms)  SELECT  "users".* FROM "users" WHERE "users"."name" = ? LIMIT ?  [["name", "aaaaa"], ["LIMIT", 1]]
  => #<User id: 101, name: "aaaaa", email: "a@gmail.com", created_at: "2022-05-08 02:03:31", updated_at: "2022-05-08 02:03:31", 
  password_digest: "$2a$10$pm7eqE8fs7SaFhOlkIW3FeLPQKLvc1bBYmXOwnzCVQB...", remember_digest: nil, admin: false, 
  activation_digest: "$2a$10$UnqX4E6WUecQtSQst7kruefRB4NFnYhyxPywUywFYnQ...", activated: false, activated_at: nil>
 ユーザーは存在するが、activated: falseになっている。
 

[アカウントを有効化する]
<authenticated?メソッドの抽象化>
[演習]
1. コンソール内で新しいユーザーを作成してみる。新しいユーザーの記憶トークンと有効化トークンはどのような値になっているか？
　 また、各トークンに対応するダイジェストの値はどうなっているか？
 > user.remember_token
 => nil 
 
 > user.remember_digest
 => nil 
 
 > user.activation_token
 => "dSlD7gQ1fe4H6Jw-kP-6-Q" 
 
 > user.activation_digest
 => "$2a$10$QYp9fFpOzajxZnw3dcc1.O8iD5iUgQ6eAA3I43fEFlokYA/M3i1OK" 

2. リスト 11.26で抽象化したauthenticated?メソッドを使って、先ほどの各トークン/ダイジェストの組み合わせで認証が成功することを確認。
 > user.remember
 => true 
 
 > user.authenticated?(:remember, user.remember_token)
 => true 
 
 > user.authenticated?(:activation, user.activation_token)
 => true 


<editアクションで有効化>
[演習]
1. コンソールから、11.2.4で生成したメールに含まれているURLを調べてみてください。URL内のどこに有効化トークンが含まれているか？
 https://rails-tutorial-mhartl.c9users.io/     この部分→    account_activations/FvTkXWNqmawfvHryiXgl4g            /edit?email=abc%40gmail.com

2. 先ほど見つけたURLをブラウザに貼り付けて、そのユーザーの認証に成功し、有効化できることを確認。
　 また、有効化ステータスがtrueになっていることをコンソールから確認。
 > user.activated
 => true
 

<有効化のテストとリファクタリング>
[演習]
1. リスト 11.35にあるactivateメソッドはupdate_attributeを２回呼び出していますが、これは各行で１回ずつデータベースへ問い合わせしていることになる。
　 リスト 11.39に記したテンプレートを使って、update_attributeの呼び出しを１回のupdate_columns呼び出しにまとめてみる。
　 (これでデータベースへの問い合わせが１回で済むようになる)
　 また、変更後にテストを実行し、 greenになることも確認。
 [user.rb]
 # アカウントを有効にする
 def activate
   update_columns(activated: true, activated_at: Time.zone.now)
 end
 
 テストもGREEN。

2. 現在は、/usersのユーザーindexページを開くとすべてのユーザーが表示され、/users/:idのようにIDを指定すると個別のユーザーを表示できる。
　 しかし考えてみれば、有効でないユーザーは表示する意味がない。そこで、リスト 11.40のテンプレートを使って、この動作を変更してみる。
　 なお、ここで使っているActive Recordのwhereメソッドについては、13.3.3でもう少し詳しく説明する。
 [users_controller.rb]
 def index
    @users = User.where(activated: true).paginate(page: params[:page])
  end

  def show
    @user = User.find(params[:id])
    redirect_to root_url and return unless @user.activated?
  end

3. ここまでの演習課題で変更したコードをテストするために、/users と /users/:id の両方に対する統合テストを作成してみる。
　 　訳注: update_columnsメソッドは、コールバックとバリデーションを実行せずにスキップするので、
　 　　　　コールバックやバリデーションをかける必要がある場合は注意が必要。
 