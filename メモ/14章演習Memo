ユーザーをフォローする

[Relationshipモデル]
<データモデルの問題(および解決策)>
[演習]
1. 図 14.7のid=1のユーザーに対してuser.following.map(&:id)を実行すると、結果はどのようになるか?
    ヒント: 4.3.2で紹介したmap(&:method_name)のパターンを思い出してください。例えばuser.following.map(&:id)の場合、idの配列を返します。
 id=1にフォローされているユーザー（id: 2, 7, 10,）のidをそれぞれ１つずつ返す

2. 図 14.7を参考にして、id=2のユーザーに対してuser.followingを実行すると、結果はどのようになるか? 
   また、同じユーザーに対してuser.following.map(&:id)を実行すると、結果はどのようになるか? 想像してみてください。
 id=2にフォローされているユーザー（id: 1）を返す
 

<User/Relationshipの関連付け>
[演習]
1. コンソールを開き、表 14.1のcreateメソッドを使ってActiveRelationshipを作ってみる。
　 データベース上に２人以上のユーザーを用意し、最初のユーザーが２人目のユーザーをフォローしている状態を作ってみる。
 > user = User.first
 
 > user2 = User.second
 
 > user.active_relationships.create(followed_id: user2.id)
   (0.1ms)  begin transaction
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
  User Load (0.1ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 2], ["LIMIT", 1]]
  Relationship Create (4.7ms)  INSERT INTO "relationships" ("follower_id", "followed_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["follower_id", 1], ["followed_id", 2], ["created_at", "2022-07-15 03:26:06.183624"], ["updated_at", "2022-07-15 03:26:06.183624"]]
   (6.3ms)  commit transaction
 => #<Relationship id: 1, follower_id: 1, followed_id: 2, created_at: "2022-07-15 03:26:06", updated_at: "2022-07-15 03:26:06"> 
 
2. 先ほどの演習を終えたら、active_relationship.followedの値とactive_relationship.followerの値を確認し、それぞれの値が正しいことを確認。
 => #<Relationship id: 1, follower_id: 1, followed_id: 2, created_at: "2022-07-15 03:26:06", updated_at: "2022-07-15 03:26:06"> 


<Relationshipのバリデーション>
[演習]
1. リスト14.5のバリデーションをコメントアウトしても、テストが成功したままになっていることを確認。
　 (以前のRailsのバージョンでは、このバリデーションが必須だったが、Rails5から必須ではなくなった。今回はフォロー機能の実装を優先するが、この手のバリデーションが省略されている可能性があることを頭の片隅で覚えておく。)
 コメントアウトしても、テストが成功した。
 

<フォローしているユーザー>
[演習]
1. コンソールを開き、リスト 14.9のコードを順々に実行してみましょう。
 > michael = User.third
 
 > archer = User.fourth
 
 > michael.following?(archer)
  User Exists (0.9ms)  SELECT  1 AS one FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."followed_id" WHERE "relationships"."follower_id" = ? AND "users"."id" = ? LIMIT ?  [["follower_id", 3], ["id", 4], ["LIMIT", 1]]
 => false 
 
 > michael.follow(archer)
   (0.1ms)  begin transaction
  User Load (0.1ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 3], ["LIMIT", 1]]
  Relationship Create (4.5ms)  INSERT INTO "relationships" ("follower_id", "followed_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["follower_id", 3], ["followed_id", 4], ["created_at", "2022-07-21 14:15:33.888750"], ["updated_at", "2022-07-21 14:15:33.888750"]]
   (8.5ms)  commit transaction
  User Load (0.2ms)  SELECT  "users".* FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."followed_id" WHERE "relationships"."follower_id" = ? LIMIT ?  [["follower_id", 3], ["LIMIT", 11]]
 => #<ActiveRecord::Associations::CollectionProxy [#<User id: 4, name: "Emely Borer", email: "example-3@railstutorial.org", created_at: "2022-06-22 13:11:20", updated_at: "2022-06-22 13:11:20", password_digest: "$2a$10$DYtjeCTsi3EthExSosUx/O/kttL70R/YZ1HmGm5tYMA...", 
 remember_digest: nil, admin: false, activation_digest: "$2a$10$hSNA1VYEc6W5xMFtNZZFYupMO.p3qyxJtT148TkfWcV...", activated: true, activated_at: "2022-06-22 13:11:20", reset_digest: nil, reset_sent_at: nil>]> 
 
 > michael.following?(archer)
  User Exists (0.2ms)  SELECT  1 AS one FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."followed_id" WHERE "relationships"."follower_id" = ? AND "users"."id" = ? LIMIT ?  [["follower_id", 3], ["id", 4], ["LIMIT", 1]]
 => true 
 
 > michael.unfollow(archer)
  Relationship Load (0.2ms)  SELECT  "relationships".* FROM "relationships" WHERE "relationships"."follower_id" = ? AND "relationships"."followed_id" = ? LIMIT ?  [["follower_id", 3], ["followed_id", 4], ["LIMIT", 1]]
   (0.0ms)  begin transaction
  Relationship Destroy (1.8ms)  DELETE FROM "relationships" WHERE "relationships"."id" = ?  [["id", 2]]
   (6.2ms)  commit transaction
 => #<Relationship id: 2, follower_id: 3, followed_id: 4, created_at: "2022-07-21 14:15:33", updated_at: "2022-07-21 14:15:33"> 
 
 > michael.following?(archer)
  User Exists (0.2ms)  SELECT  1 AS one FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."followed_id" WHERE "relationships"."follower_id" = ? AND "users"."id" = ? LIMIT ?  [["follower_id", 3], ["id", 4], ["LIMIT", 1]]
 => false 

2. 先ほどの演習の各コマンド実行時の結果を見返してみて、実際にはどんなSQLが出力されたのか確認してみましょう。
 ↑


<フォロワー>
[演習]
1. コンソールを開き、何人かのユーザーが最初のユーザーをフォローしている状況を作ってみる。
　 最初のユーザーをuserとすると、user.followers.map(&:id)の値はどのようになっているか?
 > user = User.first

 > user2 = User.second
 
 > user3 = User.third
 
 > user4 = User.fourth

 > user2.follow(user)

 > user3.follow(user)

 > user4.follow(user)

 > user.followers.map(&:id)
   User Load (0.3ms)  SELECT "users".* FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."follower_id" WHERE "relationships"."followed_id" = ?  [["followed_id", 1]]
 => [2, 3, 4]

2. 上の演習が終わったら、user.followers.countの実行結果が、先ほどフォローさせたユーザー数と一致していることを確認。
 > user.followers.count
   (0.2ms)  SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."follower_id" WHERE "relationships"."followed_id" = ?  [["followed_id", 1]]
 => 3 
 
3. user.followers.countを実行した結果、出力されるSQL文はどのような内容になっているか? また、user.followers.to_a.countの実行結果と違っている箇所はあるか? 
     ヒント: もしuserに100万人のフォロワーがいた場合、どのような違いがあるでしょうか? 考えてみてください。
 実行結果にsql文が出力されない。
 100万人のフォロワーがいたとすると、user.followers.countの場合、DB内でfollowersの合計を算出し返す。
 user.followers.to_a.countの場合、DBから100万回データを取り出し配列を生成しその数の合計を返す。
 

[[Follow]のWebインターフェイス]
<フォローのサンプルデータ>
[演習]
1. コンソールを開き、User.first.followers.countの結果がリスト 14.14で期待している結果と合致していることを確認。
 > User.first.followers.count
  User Load (0.9ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
   (0.9ms)  SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."follower_id" WHERE "relationships"."followed_id" = ?  [["followed_id", 1]]
 => 38 

2. 先ほどの演習と同様に、User.first.following.countの結果も合致していることを確認。
 > User.first.following.count
  User Load (0.2ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
   (0.2ms)  SELECT COUNT(*) FROM "users" INNER JOIN "relationships" ON "users"."id" = "relationships"."followed_id" WHERE "relationships"."follower_id" = ?  [["follower_id", 1]]
 => 49 


<統計と[Follow]フォーム>
[演習]
1. 
 