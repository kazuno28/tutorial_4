[Remember me機能]
ユーザーのログイン状態をブラウザを閉じた後でも有効にする [remember me] 機能を実装していく。
この機能を使うと、ユーザーが明示的にログアウトを実行しない限り、ログイン状態を維持することができるようになる。
後半では、この機能を使うかどうかをユーザーに決めてもらうため、[remember me] のチェックボックスをログインフォームに追加していく。

<記憶トークンと暗号化>
セッションの永続化の第一歩として記憶トークン (remember token) を生成し、cookiesメソッドによる永続的cookiesの作成や、
安全性の高い記憶ダイジェスト (remember digest) によるトークン認証にこの記憶トークンを活用する。

sessionメソッドで保存した情報は自動的に安全が保たれますが、cookiesメソッドに保存する情報はそのようにはなっていない。
cookiesを永続化するとセッションハイジャックという攻撃を受ける可能性がある。
　→この攻撃は、記憶トークンを奪って、特定のユーザーになりすましてログインするというもの。
 [cookiesを盗み出す有名な方法]
  1. 管理の甘いネットワークを通過するネットワークパケットからパケットスニッファという特殊なソフトウェアで直接cookieを取り出す。
  2. データベースから記憶トークンを取り出す。
  3. クロスサイトスクリプティング (XSS) を使う。
  4. ユーザーがログインしているパソコンやスマホを直接操作してアクセスを奪い取る。

 [1]を防止するためにSecure Sockets Layer(SSL)をサイト全体に適用して、ネットワークデータを暗号化で保護し、
 パケットスニッファから読み取られないようにする。

 [2]の対策としては、記憶トークンをそのままデータベースに保存するのではなく、記憶トークンのハッシュ値を保存するようにする。

 [3]の問題については、Railsによって自動的に対策が行われる。ビューのテンプレートで入力した内容をすべて自動的にエスケープする。

 [4]システム側での根本的な防衛手段を講じることは不可能だが、二次被害を最小限に留めることは可能。
 ユーザーが(別端末などで)ログアウトしたときにトークンを必ず変更するようにし、セキュリティ上重要になる可能性のある情報を表示するときは
 デジタル署名(digital signature)を行うようにする。

 <セッション作成手順>
 1. 記憶トークンにはランダムな文字列を生成して用いる。
 2. ブラウザのcookiesにトークンを保存するときには、有効期限を設定する。
 3. トークンはハッシュ値に変換してからデータベースに保存する。
 4. ブラウザのcookiesに保存するユーザーIDは暗号化しておく。
 5. 永続ユーザーIDを含むcookiesを受け取ったら、そのIDでデータベースを検索し、記憶トークンのcookiesがデータベース内のハッシュ値と一致することを確認する。

[演習]
1. コンソールを開き、データベースにある最初のユーザーを変数userに代入する。その後、そのuserオブジェクトからrememberメソッドがうまく動くかどうか確認。
　 また、remember_tokenとremember_digestの違いも確認。
 > user = User.first
  User Load (0.1ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24", updated_at: "2022-03-07 08:23:24",
 password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...", remember_digest: nil>

 > user.remember
  (0.1ms)  begin transaction
  User Update (4.3ms)  UPDATE "users" SET "updated_at" = ?, "remember_digest" = ? WHERE "users"."id" = ?  [["updated_at", "2022-03-19 05:34:51.050213"],
  ["remember_digest", "$2a$10$2611BjLLCIfghXxAMSvq2Ogj8igwWlNHignE.Q1N.0RBNuMhUUrbm"], ["id", 1]]
  (5.2ms)  commit transaction
 => true

 > user.remember_token
 => "dhrQpiNI-uZzSMNhSRV65A"

 > user.remember_digest
 => "$2a$10$2611BjLLCIfghXxAMSvq2Ogj8igwWlNHignE.Q1N.0RBNuMhUUrbm"

2. [user.rb]では、明示的にUserクラスを呼び出すことで、新しいトークンやダイジェスト用のクラスメソッドを定義した。
　 実際、User.new_tokenやUser.digestを使って呼び出せるようになったので、おそらく最も明確なクラスメソッドの定義方法であると言える。
　 しかし、より「Ruby的に正しい」クラスメソッドの定義方法が２通りある。1つはややわかりにくく、もう1つは非常に混乱する。
　 テストスイートを実行して、ややわかりにくいリスト 9.4の実装でも、非常に混乱しやすいリスト 9.5の実装でも、いずれも正しく動くことを確認。
　 　ヒント: selfは、通常の文脈ではUser「モデル」、つまりユーザーオブジェクトのインスタンスを指すが、
　 　リスト 9.4やリスト 9.5の文脈では、selfはUser「クラス」を指すことに注意。
 [リスト 9.4　user.rb]
 class User < ApplicationRecord
  .
  .
  # 渡された文字列のハッシュ値を返す
  def self.digest(string)
    cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :
                                                  BCrypt::Engine.cost
    BCrypt::Password.create(string, cost: cost)
  end

  # ランダムなトークンを返す
  def self.new_token
    SecureRandom.urlsafe_base64
  end
  .
  .
end

[リスト 9.5　user.rb]
class User < ApplicationRecord
  .
  .
  class << self
    # 渡された文字列のハッシュ値を返す
    def digest(string)
      cost = ActiveModel::SecurePassword.min_cost ? BCrypt::Engine::MIN_COST :
                                                    BCrypt::Engine.cost
      BCrypt::Password.create(string, cost: cost)
    end

    # ランダムなトークンを返す
    def new_token
      SecureRandom.urlsafe_base64
    end
  end
  .
  .


<ログイン状態の保持>
[演習]
2. コンソールを開き、[user.rb]のauthenticated?メソッドがうまく動くかどうか確認。
 > user = User.first
  User Load (0.1ms)  SELECT  "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?  [["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2022-03-07 08:23:24",
 updated_at: "2022-03-19 05:34:51", password_digest: "$2a$10$Lp4OvemyURYb3FVk.MrMeOihflVLQf5MIJR9SuUn0JN...",
 remember_digest: "$2a$10$2611BjLLCIfghXxAMSvq2Ogj8igwWlNHignE.Q1N.0R...">

 > user.remember
   (0.1ms)  begin transaction
  User Update (4.0ms)  UPDATE "users" SET "updated_at" = ?, "remember_digest" = ? WHERE "users"."id" = ?
  [["updated_at", "2022-03-20 07:12:42.110834"], ["remember_digest", "$2a$10$rduAXPIiRDiMgeQkzds5pePts.mRazPRrBA9v1nPJ0PMPRVk1.2g2"], ["id", 1]]
   (5.1ms)  commit transaction
 => true

 > user.authenticated?(user.remember_token)
 => true


<ユーザーを忘れる>
user.forgetメソッドをさ作成して、user.rememberが取り消されるようにする。
　→記憶ダイジェストをnilで更新する。


<2つの目立たないバグ>
この段階では、小さなバグが2つ残っていて、この2つのバグは互いに強く関連している。
1つ目は、ユーザーは場合によっては、同じサイトを複数のタブ (あるいはウィンドウ) で開いていることもある。
ログアウト用リンクはログイン中のみ表示されるが、今のcurrent_userの使い方では、ユーザーが1つのタブでログアウトし、
もう1つのタブで再度ログアウトしようとするとエラーになってしまう。
　→もう1つのタブで "Log out" リンクをクリックすると、current_userがnilとなってしまうため、log_outメソッド内のforget(current_user)が失敗してしまうから。
この問題を回避するためには、ユーザーがログイン中の場合にのみログアウトさせる必要がある。

2つ目は、ユーザーが複数のブラウザ (FirefoxやChromeなど) でログインしていたときに起こる。
例えば、Firefoxでログアウトし、Chromeではログアウトせずにブラウザを終了させ、再度Chromeで同じページを開くと、この問題が発生する。
【FirefoxとChromeを使った具体例で考える】
　ユーザーがFirefoxからログアウトすると、user.forgetメソッドによってremember_digestがnilになる。
　この時点では、Firefoxでまだアプリケーションが正常に動作しているはず。
　この時、[sessions_helper.rb]ではlog_outメソッドによってユーザーIDが削除されるため、ハイライトされている2つの条件はfalseになる。
　結果として、current_userメソッドの最終的な評価結果は、nilになる。
　一方、Chromeを閉じたとき、session[:user_id]はnilになる。（ブラウザが閉じたときに、全てのセッション変数の有効期限が切れるため）
　しかし、cookiesはブラウザの中に残り続けているため、Chromeを再起動してサンプルアプリケーションにアクセスすると、
　データベースからそのユーザーを見つけることができてしまう。
　結果として、if user && user.authenticated?(cookies[:remember_token])の条件式が評価される。
　このとき、userがnilであれば1番目の条件式で評価は終了するが、実際にはnilではないので2番目の条件式まで評価が進み、そのときにエラーが発生する。
　　→原因は、Firefoxでログアウトしたときに、ユーザーのremember_digestが削除されているにもかかわらず、
　　 Chromeでアプリケーションにアクセスしたときに BCrypt::Password.new(remember_digest).is_password?(remember_token) を実行してしまうから。
　すなわち、remember_digestがnilになるので、bcryptライブラリ内部で例外が発生する。
この問題を解決するには、remember_digestが存在しないときはfalseを返す処理をauthenticated?に追加する必要がある。

[演習]
1. [sessions_controller.rb]で修正した行をコメントアウトし、２つのログイン済みのタブによるバグを実際に確認。
　 まず片方のタブでログアウトし、その後、もう１つのタブで再度ログアウトを試す。
 動作確認

2. [user.rb]で修正した行をコメントアウトし、２つのログイン済みのブラウザによるバグを実際に確認。
　 まず片方のブラウザでログアウトし、もう一方のブラウザを再起動してサンプルアプリケーションにアクセス。
 動作確認

3. 上のコードでコメントアウトした部分を元に戻し、テストスイートが red から greenになることを確認。
 コメントアウトアウトを元に戻す。


<[Remember me]チェックボックス>
チェックボックスがオンのときにユーザーを記憶し、オフのときには記憶しないようにする。
　ログインフォームから送信されたparamsハッシュには既にチェックボックスの値が含まれている。
　[sessions/new.html.erb]のフォームに無効な値を入力して実際に送信すれば、ページのデバッグ情報で値を確認することもできる。
params[:session][:remember_me]の値は、チェックボックスがオンのときに'1'になり、オフのときに'0'になる。
paramsハッシュのこの値を調べれば、送信された値に基いてユーザーを記憶したり忘れたりできるようになる。

「三項演算子 (ternary operator)」を使うと、
　　if params[:session][:remember_me] == '1'
  　　remember(user)
　　else　　　　　　　　　　　　　　　　　　　　　　　　→　　params[:session][:remember_me] == '1' ? remember(user) : forget(user)
  　　forget(user)
　　end
　と、一行にまとめることができる。
このコードを使うことで、Sessionsコントローラのcreateアクション内にあったremember userがコンパクトになった。

[演習]
1. ブラウザでcookies情報を調べ、[remember me] をチェックしたときに意図した結果になっているかどうかを確認。
 remember_tokenとuser_idは変わっていないので[Remember me]がちゃんと機能している。

2. コンソールを開き、三項演算子を使った実例を考えてみる。(コラム 9.2参考)
 > team = "RealMadrid"
 => "RealMadrid"

 > puts team == "RealMadrid" ? "Madridista!" : "No~"
  Madridista!
 => nil

 > puts team == "Barcelona" ? "Madridista!" : "No~"
  No~
 => nil
 
 
[[Remember me]のテスト]
<[Remember me]ボックスをテストする>
[演習]
1. リスト 9.25の統合テストでは、仮想のremember_token属性にアクセスできないと説明したが、assignsという特殊なテストメソッドを使うとアクセスできるようになる。
　 コントローラで定義したインスタンス変数にテストの内部からアクセスするには、テスト内部でassignsメソッドを使う。
　 このメソッドにはインスタンス変数に対応するシンボルを渡す。
　 例えばcreateアクションで@userというインスタンス変数が定義されていれば、テスト内部ではassigns(:user)と書くことでインスタンス変数にアクセスできる。
　 本チュートリアルのアプリケーションの場合、Sessionsコントローラのcreateアクションでは、userを (インスタンス変数ではない) 通常のローカル変数として定義したが、
　 これをインスタンス変数に変えてしまえば、cookiesにユーザーの記憶トークンが正しく含まれているかどうかをテストできるようになる。
　 このアイデアに従ってリスト 9.27とリスト 9.28の不足分を埋め (ヒントとして?や（コードを書き込む）を目印に置いてある)、[remember me] チェックボックスのテストを改良してみる。
 
 [リスト 9.25 users_login_test.rb]
  test "login with remembering" do
    log_in_as(@user, remember_me: '1')
    assert_not_empty cookies['remember_token']
  end

  test "login without remembering" do
    # クッキーを保存してログイン
    log_in_as(@user, remember_me: '1')
    delete logout_path
    # クッキーを削除してログイン
    log_in_as(@user, remember_me: '0')
    assert_empty cookies['remember_token']
  end
 
 [リスト 9.27 sessions_controller.rb]
  def create
    ?user = User.find_by(email: params[:session][:email].downcase)                →　　@user = User.find_by(email: params[:session][:email].downcase)
    if ?user && ?user.authenticate(params[:session][:password])                   →　　if @user && @user.authenticate(params[:session][:password])
      log_in ?user                                                                →　　  log_in @user
      params[:session][:remember_me] == '1' ? remember(?user) : forget(?user)　　 →　　  params[:session][:remember_me] == '1' ? remember(@user) : forget(@user)
      redirect_to ?user                                                           →      redirect_to @user
    else
      flash.now[:danger] = 'Invalid email/password combination'
      render 'new'
    end
  end
  
 [リスト 9.28 users_login_test.rb]
  test "login with remembering" do
    log_in_as(@user, remember_me: '1')
    assert_equal （コードを書き込む）, assigns(:user).（コードを書き込む）        →　　assert_equal cookies['remember_token'], assigns(:user).remember_token
  end
  
 