ユーザーのマイクロポスト

[Micropostモデル]
<基本的なモデル>
Micropostモデルは、マイクロポストの内容を保存するcontent属性と、特定のユーザーとマイクロポストを関連付けるuser_id属性の2つの属性だけを持つ。

   Microposts
id           integer
content      text
user_id      integer
created_at   datetime
updated_at   datetime

マイクロポストの投稿にString型ではなくText型を使っている点に注。これは、ある程度の量のテキストを格納するときに使われる型。
String型でも255文字までは格納できるため、この型でも13.1.2で実装する140文字制限を満たせるが、Text型の方が表現豊かなマイクロポストを実現できる。

例えば、13.3.2では投稿フォームにString用のテキストフィールドではなくてText用のテキストエリアを使うため、より自然な投稿フォームが実現できる。
また、Text型の方が将来における柔軟性に富んでいて、例えばいつか国際化をするときに、言語に応じて投稿の長さを調節することもできる。
さらに、Text型を使っていても本番環境でパフォーマンスの差は出ない。これらの理由から、デメリットよりもメリットの方が多いので、今回はText型を採用している。

[演習]
1. RailsコンソールでMicropost.newを実行し、インスタンスを変数micropostに代入する。
　 その後、user_idに最初のユーザーのidを、contentに "Lorem ipsum" をそれぞれ代入してみる。
　 この時点では、 micropostオブジェクトのマジックカラム (created_atとupdated_at) には何が入っているでしょうか?
 > micropost = Micropost.new
 => #<Micropost id: nil, content: nil, user_id: nil, created_at: nil, updated_at: nil> 
 
 > user = User.first
 
 > micropost.user_id = user.id
 => 1 
 
 > micropost.content = "Lorem ipsum"
 => "Lorem ipsum" 
 
 > micropost.created_at
 => nil 
 
2. 先ほど作ったオブジェクトを使って、micropost.userを実行してみるとどのような結果が返ってくるでしょうか? 
　 また、micropost.user.nameを実行した場合の結果はどうなるでしょうか?
 > micropost.user
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?  [["id", 1], ["LIMIT", 1]]
  => #<User id: 1, name: "Example User", email: "example@railstutorial.org", created_at: "2022-05-01 07:24:15", updated_at: "2022-05-01 07:24:15", 
  password_digest: "$2a$10$PniTSH6lw/3p/7CpdEXOLOzn7Nkg7PsEvnEVpPzkfR/...", remember_digest: nil, admin: true, 
  activation_digest: "$2a$10$2e16YvBHYqI01S2dCpAgRuq3HXch7zdrnPO57q7rWYa...", activated: true, activated_at: "2022-05-01 07:24:14", reset_digest: nil, reset_sent_at: nil> 
  
 > micropost.user.name
 => "Example User" 
 
3. 先ほど作ったmicropostオブジェクトをデータベースに保存してみる。この時点でもう一度マジックカラムの内容を調べてみましょう。今度はどのような値が入っているでしょうか?
 > micropost.save
   (0.1ms)  begin transaction
  Micropost Create (2.5ms)  INSERT INTO "microposts" ("content", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["content", "Lorem ipsum"], ["user_id", 1], 
  ["created_at", "2022-06-16 02:02:24.615745"], ["updated_at", "2022-06-16 02:02:24.615745"]]
   (7.7ms)  commit transaction
 => true 
 
 > micropost.created_at
 => Thu, 16 Jun 2022 02:02:24 UTC +00:00 
 
 > micropost.updated_at
 => Thu, 16 Jun 2022 02:02:24 UTC +00:00 
 

<Micropostのバリデーション>
[演習]
1. Railsコンソールを開き、user_idとcontentが空になっているmicropostオブジェクトを作ってみる。
　 このオブジェクトに対してvalid?を実行すると、失敗することを確認。また、生成されたエラーメッセージにはどんな内容が書かれているか?
 >  micropost = Micropost.new
 => #<Micropost id: nil, content: nil, user_id: nil, created_at: nil, updated_at: nil> 
 
 > micropost.valid?
 => false 
 
 > micropost.errors.full_messages
 => ["User must exist", "Content can't be blank"] 
 
2. コンソールを開き、今度はuser_idが空でcontentが141文字以上のmicropostオブジェクトを作ってみる。
　 このオブジェクトに対してvalid?を実行すると、失敗することを確認。また、生成されたエラーメッセージにはどんな内容が書かれているか?
 > micropost = Micropost.new(content: "a" * 141)
 => #<Micropost id: nil, content: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...", user_id: nil, created_at: nil, updated_at: nil> 
 
 > micropost.valid?
 => false 
 
 > micropost.errors.full_messages
 => ["User must exist", "Content is too long (maximum is 140 characters)"] 


<User/Micropostの関連付け>
[演習]
1. データベースにいる最初のユーザーを変数userに代入。そのuserオブジェクトを使ってmicropost = user.microposts.create(content: "Lorem ipsum")
 　を実行すると、どのような結果が得られるか?
 > user = User.first
 
 > micropost = user.microposts.create(content: "Lorem ipsum")
   (0.1ms)  begin transaction
  Micropost Create (5.2ms)  INSERT INTO "microposts" ("content", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["content", "Lorem ipsum"], 
  ["user_id", 1], ["created_at", "2022-06-19 01:08:27.285764"], ["updated_at", "2022-06-19 01:08:27.285764"]]
   (6.4ms)  commit transaction
 => #<Micropost id: 2, content: "Lorem ipsum", user_id: 1, created_at: "2022-06-19 01:08:27", updated_at: "2022-06-19 01:08:27"> 
 
2. 先の演習課題で、データベース上に新しいマイクロポストが追加されたはず。user.microposts.find(micropost.id)を実行して、本当に追加されたのかを確認。
　 また、先ほど実行したmicropost.idの部分をmicropostに変更すると、結果はどうなるか?
 > user.microposts.find(micropost.id)
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."user_id" = ? AND "microposts"."id" = ? LIMIT ?  [["user_id", 1], ["id", 2], ["LIMIT", 1]]
 => #<Micropost id: 2, content: "Lorem ipsum", user_id: 1, created_at: "2022-06-19 01:08:27", updated_at: "2022-06-19 01:08:27">
 
 > user.microposts.find(micropost)
 Traceback (most recent call last):
         1: from (irb):4
 ArgumentError (You are passing an instance of ActiveRecord::Base to `find`. Please pass the id of the object by calling `.id`.)
 
3. user == micropost.userを実行した結果はどうなるか? また、user.microposts.first == micropost を実行した結果はどうなるか? それぞれ確認。
 > user == micropost.user
 => true 
 
 > user.microposts.first == micropost
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."user_id" = ? ORDER BY "microposts"."id" ASC LIMIT ?  [["user_id", 1], ["LIMIT", 1]]
 => false 
 
 
<マイクロポストの改良>
ユーザーのマイクロポストを特定の順序で取得できるようにしたり、マイクロポストをユーザーに依存させて、
ユーザーが削除されたらマイクロポストも自動的に削除されるようにしていく。

[演習]
1. Micropost.first.created_atの実行結果と、Micropost.last.created_atの実行結果を比べてみる。
 > Micropost.first.created_at
  Micropost Load (0.9ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" DESC LIMIT ?  [["LIMIT", 1]]
 => Sun, 19 Jun 2022 01:08:27 UTC +00:00 
 
 > Micropost.last.created_at
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" ASC LIMIT ?  [["LIMIT", 1]]
 => Thu, 16 Jun 2022 02:02:24 UTC +00:00 

2. Micropost.firstを実行したときに発行されるSQL文はどうなっているか? 同様にして、Micropost.lastの場合はどうなっているか? 
     ヒント: それぞれをコンソール上で実行したときに表示される文字列が、SQL文になります。
 > Micropost.first
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" DESC LIMIT ?  [["LIMIT", 1]]
 => #<Micropost id: 2, content: "Lorem ipsum", user_id: 1, created_at: "2022-06-19 01:08:27", updated_at: "2022-06-19 01:08:27"> 
 
 > Micropost.last
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" ORDER BY "microposts"."created_at" ASC LIMIT ?  [["LIMIT", 1]]
 => #<Micropost id: 1, content: "Lorem ipsum", user_id: 1, created_at: "2022-06-16 02:02:24", updated_at: "2022-06-16 02:02:24"> 
 
3. データベース上の最初のユーザーを変数userに代入する。そのuserオブジェクトが最初に投稿したマイクロポストのidはいくつか? 
　 次に、destroyメソッドを使ってそのuserオブジェクトを削除してみる。削除すると、そのuserに紐付いていたマイクロポストも
　 削除されていることをMicropost.findで確認。
 > user = User.first
 
 > user.microposts.first
 
 > user.destroy
 
 > Micropost.find(1)
  Micropost Load (0.2ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."id" = ? ORDER BY "microposts"."created_at" DESC LIMIT ?  [["id", 1], ["LIMIT", 1]]
  Traceback (most recent call last):
         2: from (irb):9
         1: from (irb):9:in `rescue in irb_binding'
  ActiveRecord::RecordNotFound (Couldn't find Micropost with 'id'=1)


[マイクロポストを表示する]
<マイクロポストの描画>
[演習]
1. 7.3.3で軽く説明したように、今回ヘルパーメソッドとして使ったtime_ago_in_wordsメソッドは、Railsコンソールのhelperオブジェクトから
　 呼び出すことができる。このhelperオブジェクトのtime_ago_in_wordsメソッドを使って、3.weeks.agoや6.months.agoを実行してみる。
 > helper.time_ago_in_words(3.weeks.ago)
 => "21 days" 
 
 > helper.time_ago_in_words(6.month.ago)
 => "6 months" 
 
2. helper.time_ago_in_words(1.year.ago)と実行すると、どういった結果が返ってくるか?
 > helper.time_ago_in_words(1.year.ago)
 => "about 1 year" 
 
3. micropostsオブジェクトのクラスは何か? 
    ヒント: リスト13.23内のコードにあるように、まずはpaginateメソッド(引数はpage: nil)でオブジェクトを取得し、その後classメソッドを呼び出してみる。
 > user = User.find(1)
 
 > microposts = user.microposts.paginate(page: nil)
  Micropost Load (0.1ms)  SELECT  "microposts".* FROM "microposts" WHERE "microposts"."user_id" = ? ORDER BY "microposts"."created_at" DESC LIMIT ? OFFSET ?  [["user_id", 1], ["LIMIT", 11], ["OFFSET", 0]]
 => #<ActiveRecord::AssociationRelation []> 
 
 > microposts.class
 => Micropost::ActiveRecord_AssociationRelation 
 
 
<マイクロポストのサンプル>
[演習]
1. (1..10).to_a.take(6)というコードの実行結果を推測できるか? 推測した値が合っているかどうか、
　 実際にコンソールを使って確認。
 > (1..10).to_a.take(6)
 => [1, 2, 3, 4, 5, 6] 

2. 先ほどの演習にあったto_aメソッドの部分は本当に必要か? 確かめる。
 > (1..10).take(6)
 => [1, 2, 3, 4, 5, 6] 
 結果が変わらなかったので必要ない。
 
3. Fakerはlorem ipsum以外にも、非常に多種多様の事例に対応している。Fakerのドキュメント(英語)を眺めながら画面に出力する方法を学び、
　 実際に大学名や電話番号、Hipster IpsumやChuck Norris facts(参考: チャック・ノリスの真実)を画面に出力してみる。
 > Faker::University.name
 => "Crist College" 
 
 > Faker::PhoneNumber.phone_number
 => "(598) 518-2792 x986" 
 
 >  Faker::Hipster.words
 => ["wolf", "brunch", "hoodie"] 
 
 > Faker::ChuckNorris.fact
 => "For Chuck Norris, NP-Hard = O(1)." 
 
 
<プロフィール画面のマイクロポストをテストする>
[演習]
1. リスト13.28にある２つの'h1'のテストが正しいか確かめるため、該当するアプリケーション側のコードをコメントアウトしてみる。
　 テストが green から redに変わることを確認。
 <% provide(:title, @user.name) %>
 <div class="row">
   <aside class="col-md-4">
     <section class="user_info">
       <h1>
         <%= #gravatar_for @user %>
         <%= @user.name %>
       </h1>
 にすると、REDになった。 

2. リスト13.28にあるテストを変更して、will_paginateが１度のみ表示されていることをテストしてみる。
　　　ヒント: 表 5.2を参考にしてください。
 [users_profile_test.rb]
 assert_select 'div.pagination', count: 1　を追加する。
 
 
[マイクロポストを操作する]
<マイクロポストのアクセス制限>
[演習]
1. なぜUsersコントローラ内にあるlogged_in_userフィルターを残したままにするとマズイのか? 考えてみる。
 無駄なコードが増えてエラーの原因になるから。
 

<マイクロポストを作成する>
[演習]
1. Homeページをリファクタリングして、if-else文の分岐のそれぞれに対してパーシャルを作ってみる。
 [app/views/static_pages/home.html.erb]
　<% if logged_in? %>
  　<%= render 'static_pages/home_logged_in' %>
　<% else %>
  　<%= render 'static_pages/home_not_logged_in' %>
　<% end %>

[app/views/static_pages/_home_lodgged_in.html.erb]
<div class="row">
  <aside class="col-md-4">
    <section class="user_info">
      <%= render 'shared/user_info' %>
    </section>
    <section class="micropost_form">
      <%= render 'shared/micropost_form' %>
    </section>
  </aside>
</div>

[app/views/static_pages/_home_not_logged_in.html.erb]
<div class="center jumbotron">
  <h1>Welcom to the  Sample App</h1>
  <h2>
    This is the home page for the
    <a href="https://railstutorial.jp/">Ruby on Rails Tutorial</a>
    sample application.
  </h2>
  <%= link_to "Sign up now!", signup_path, class: "btn btn-lg btn-primary" %>
</div>
<%= link_to image_tag("rails.png", alt: "Rails logo"), 'http://rubyonrails.org/' %>


<フィードの原型>
[演習]
1. 新しく実装したマイクロポストの投稿フォームを使って、実際にマイクロポストを投稿してみる。
　 Railsサーバーのログ内にあるINSERT文では、どういった内容をデータベースに送っているか? 確認してみる。
 (0.1ms)  begin transaction
  ↳ app/controllers/microposts_controller.rb:6
  Micropost Create (1.7ms)  INSERT INTO "microposts" ("content", "user_id", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["content", "aaa"], ["user_id", 101], ["created_at", "2022-06-27 11:13:22.300737"], ["updated_at", "2022-06-27 11:13:22.300737"]]
  ↳ app/controllers/microposts_controller.rb:6
 (5.9ms)  commit transaction
 
2. コンソールを開き、user変数にデータベース上の最後のユーザーを代入してみる。
　 その後、Micropost.where("user_id = ?", user.id)とuser.microposts、そしてuser.feedをそれぞれ実行してみて、実行結果がすべて同じであることを確認。
     ヒント: ==で比較すると結果が同じかどうか簡単に判別できます。
 > user = User.last
 
 > Micropost.where("user_id = ?", user.id) == user.microposts 
  Micropost Load (0.2ms)  SELECT "microposts".* FROM "microposts" WHERE "microposts"."user_id" = ? ORDER BY "microposts"."created_at" DESC  [["user_id", 101]]
  Micropost Load (0.1ms)  SELECT "microposts".* FROM "microposts" WHERE (user_id = 101) ORDER BY "microposts"."created_at" DESC
 => true 
 
 > user.microposts == user.feed
  Micropost Load (0.2ms)  SELECT "microposts".* FROM "microposts" WHERE (user_id = 101) ORDER BY "microposts"."created_at" DESC
 => true 
 

<マイクロポストを削除する>
[演習]
1. マイクロポストを作成し、その後、作成したマイクロポストを削除してみる。次に、Railsサーバーのログを見てみて、DELETE文の内容を確認。
 Micropost Destroy (0.7ms)  DELETE FROM "microposts" WHERE "microposts"."id" = ?  [["id", 301]]

2. redirect_to request.referrer || root_urlの行をredirect_back(fallback_location: root_url)と置き換えてもうまく動くことを、ブラウザを使って確認(このメソッドはRails 5から新たに導入されました)。
 問題なく動いた
 

<フィード画面のマイクロポストをテストする>
[演習]
1. リスト13.55で示した４つのコメント(「無効な送信」など)のそれぞれに対して、テストが正しく動いているか確認。
   具体的には、対応するアプリケーション側のコードをコメントアウトし、テストが redになることを確認し、元に戻すと greenになることを確認。
 「無効な送信」：[micropost.rb]のcontentのvalidatesをコメントアウトするとエラーになる。
 「有効な送信」：[microposts_controller.rb]のcreate部分の有効な送信を受けた後の処理をコメントアウトするとエラーになる。
 「投稿を削除する」：[micropost.html.erb]のdeleteのリンクをコメントアウトするとエラーになる。
 「違うユーザーのプロフィールにアクセス（削除リンクがないことを確認）」：[micropost.html.erb]のif current_user?をコメントアウトするとエラーになる

2. サイドバーにあるマイクロポストの合計投稿数をテストしてみる。このとき、単数形(micropost) と複数形(microposts) が正しく表示されているかどうかもテストする。
　　　ヒント: リスト 13.57を参考にしてみてください。


[マイクロポストの画像投稿]
<基本的な画像のアップロード>
[演習]
1. 画像付きのマイクロポストを投稿してみる。
　  もしかして、大きすぎる画像が表示されてしまいましたか? (心配しないでください、次の13.4.3でこの問題を直します)。
 大きい画像が表示された。

2. リスト13.63に示すテンプレートを参考に、13.4で実装した画像アップローダーをテストする。
　 テストの準備として、まずはサンプル画像をfixtureディレクトリに追加する(コマンド例: cp app/assets/images/rails.png test/fixtures/)。
　 リスト 13.63で追加したテストでは、Homeページにあるファイルアップロードと、投稿に成功した時に画像が表示されているかどうかをチェックしている。
　 なお、テスト内にあるfixture_file_uploadというメソッドは、fixtureで定義されたファイルをアップロードする特別なメソッド 。
　 　ヒント: picture属性が有効かどうかを確かめるときは、11.3.3で紹介したassignsメソッドを使う。このメソッドを使うと、
　 　　　　　投稿に成功した後にcreateアクション内のマイクロポストにアクセスするようになる。
 

<画像の検証>
[演習]
1. 5MB以上の画像ファイルを送信しようとした場合、どうなりますか?
 警告が表示される。
 
2. 無効な拡張子のファイルを送信しようとした場合、どうなりますか?
 エラーが出る。