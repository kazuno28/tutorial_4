[Userモデル]

<modelファイル　演習>
1. Railsコンソールを開き、User.newでUserクラスのオブジェクトが生成されること、そしてそのオブジェクトがApplicationRecordを継承していることを確認。
 > user = User.new
 => #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>

 > user.class
 => User(id: integer, name: string, email: string, created_at: datetime, updated_at: datetime)

 > user.class.superclass
 => ApplicationRecord(abstract)


2. 同様にして、ApplicationRecordがActiveRecord::Baseを継承していることについて確認。
 ・
 ・
 > user.class.superclass.superclass
 => ActiveRecord::Base


<ユーザーオブジェクトを作成する　演習>
1. user.nameとuser.emailが、どちらもStringクラスのインスタンスであることを確認。
 > user.name.class
 => String

 > user.email.class
 => String

2. created_atとupdated_atは、どのクラスのインスタンスか？
 > user.created_at.class
 => ActiveSupport::TimeWithZone

 > user.updated_at.class
 => ActiveSupport::TimeWithZone


<ユーザーオブジェクトを検索する　演習>
1. nameを使ってユーザーオブジェクトを検索してみる。また、 find_by_nameメソッドが使えることも確認。
 > User.find_by(name: "Michael Hartl")
  User Load (0.1ms)  SELECT  "users".* FROM "users" WHERE "users"."name" = ? LIMIT ?  [["name", "Michael Hartl"], ["LIMIT", 1]]
 => #<User id: 1, name: "Michael Hartl", email: "mhartl@example.com", created_at: "2022-02-27 06:02:17", updated_at: "2022-02-27 06:02:17">

 > User.find_by_name("Michael Hartl")
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."name" = ? LIMIT ?  [["name", "Michael Hartl"], ["LIMIT", 1]]
 => #<User id: 1, name: "Michael Hartl", email: "mhartl@example.com", created_at: "2022-02-27 06:02:17", updated_at: "2022-02-27 06:02:17">

2. User.allで生成されるオブジェクトを調べ、ArrayクラスではなくUser::ActiveRecord_Relationクラスであることを確認。
 > User.all
  User Load (0.1ms)  SELECT  "users".* FROM "users" LIMIT ?  [["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<User id: 1, name: "Michael Hartl", email: "mhartl@example.com", created_at: "2022-02-27 06:02:17", updated_at: "2022-02-27 06:02:17">,
 #<User id: 2, name: "A Nother", email: "another@example.org", created_at: "2022-02-27 06:05:41", updated_at: "2022-02-27 06:05:41">]>

 > User.all.class
 => User::ActiveRecord_Relation

3.User.allに対してlengthメソッドを呼び出すと、その長さを求められることを確認。
 > User.all.length
  User Load (0.3ms)  SELECT "users".* FROM "users"
 => 2


 <ユーザーオブジェクトを更新する　演習>
 1. userオブジェクトへの代入を使ってname属性を使って更新し、saveで保存してみる。
  > user.update_attribute(:name, "aaa")
   (0.1ms)  SAVEPOINT active_record_1
  User Update (0.1ms)  UPDATE "users" SET "updated_at" = ?, "name" = ? WHERE "users"."id" = ?  [["updated_at", "2022-02-27 06:38:44.972533"], ["name", "aaa"], ["id", 1]]
   (0.0ms)  RELEASE SAVEPOINT active_record_1
  => true

  > user.save
   (0.1ms)  SAVEPOINT active_record_1
   (0.0ms)  RELEASE SAVEPOINT active_record_1
  => true

2. 今度はupdate_attributesを使って、email属性を更新および保存してみる。
 > user.update_attribute(:email, "aaa@gmail.com")
   (0.1ms)  SAVEPOINT active_record_1
  User Update (0.1ms)  UPDATE "users" SET "email" = ?, "updated_at" = ? WHERE "users"."id" = ?  [["email", "aaa@gmail.com"], ["updated_at", "2022-02-27 06:40:38.552705"], ["id", 1]]
   (0.0ms)  RELEASE SAVEPOINT active_record_1
 => true

 > user.save
   (0.1ms)  SAVEPOINT active_record_1
   (0.0ms)  RELEASE SAVEPOINT active_record_1
 => true

3. 同様にして、マジックカラムであるcreated_atも直接更新できることを確認。
    ヒント: 更新するときは「1.year.ago」を使うと便利。これはRails流の時間指定の１つで、現在の時刻から１年前の時間を算出してくれる。
 > user.update_attribute(:created_at, 1.year.ago)
   (0.1ms)  SAVEPOINT active_record_1
  User Update (0.1ms)  UPDATE "users" SET "created_at" = ?, "updated_at" = ? WHERE "users"."id" = ?  [["created_at", "2021-02-27 06:43:27.744031"], ["updated_at", "2022-02-27 06:43:27.745822"], ["id", 1]]
   (0.0ms)  RELEASE SAVEPOINT active_record_1
 => true

 > user.save
   (0.1ms)  SAVEPOINT active_record_1
   (0.0ms)  RELEASE SAVEPOINT active_record_1
 => true


[ユーザーを検討する]
<有効性を検証する　演習>
1. コンソールから、新しく生成したuserオブジェクトが有効 (valid) であることを確認。
 > @user = User.new
 => #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>

 > @user.valid?
 => true


2. <ユーザーオブジェクトを作成する>で生成したuserオブジェクトも有効であるかどうか、確認。
 > user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
 => #<User id: nil, name: "Michael Hartl", email: "mhartl@example.com", created_at: nil, updated_at: nil>

 > @user.valid?
 => true


<存在性を検証する　演習>
1. 新しいユーザーuを作成し、作成した時点では有効ではない (invalid) ことを確認。
　 なぜ有効ではないのか、エラーメッセージを確認。
 > u = User.new
 => #<User id: nil, name: nil, email: nil, created_at: nil, updated_at: nil>

 > u.valid?
 => false

 > u.invalid?
 => true

 > u.errors.full_messages
 => ["Name can't be blank", "Email can't be blank"]

2. u.errors.messagesを実行すると、ハッシュ形式でエラーが取得できることを確認。
　 emailに関するエラー情報だけを取得したい場合、どうやって取得すれば良いか？
 > u.errors.messages
 => {:name=>["can't be blank"], :email=>["can't be blank"]}

 > u.errors.messages[:email]
 => ["can't be blank"]


<長さを検証する　演習>
1. 長すぎるnameとemail属性を持ったuserオブジェクトを生成し、有効でないことを確認。
 > user = User.new(name: "あ...*65", email: "a...*256@example.com")
 => #<User id: nil, name: "あ...*65", email: "a*256...@example.com", created_at: nil, updated_at: nil>
 
 > user.valid?
 => false 
 
2. 長さに関するバリデーションが失敗した時、どんなエラーメッセージが生成されるか確認。
 > user.errors.full_messages
 => ["Name is too long (maximum is 50 characters)", "Email is too long (maximum is 255 characters)"] 


<フォーマットを検証する　演習>
1. Rubularにて確認。

2. foo@bar..comのようにドットが連続した無効なメールアドレスを無効なメールアドレスリストに追加し、これによってテストが失敗することを確認。
　 ２つの連続したドットはマッチさせないようにする正規表現を使ってこのテストがパスすることを確認。
 追加しただけだと失敗したのを確認。正規表現を使うことで解消された。

3.  Rubularにて確認。 


<一意性を　演習>
1. user_test.rb にメールアドレスを小文字にするテストを追加。
　 テストがうまく動いているか確認するために、before_saveの行をコメントアウトしてredになること、コメントアウトを解除すると greenになることを確認。
 実際に実行し、この通りになることを確認。

2. テストスイートの実行結果を確認しながら、before_saveコールバックをemail.downcase!に書き換えてみる。
　　ヒント: メソッドの末尾に!を付け足すことにより、email属性を直接変更できるようになる。
 